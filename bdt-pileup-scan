#!/usr/bin/env python
from tauperf.categories.hlt import Category_1P_HLT, Category_MP_HLT
from tauperf.classify import Classifier
from multiprocessing import Process


# Ranked by TMVA classification
features_1p = [
    'centFrac',
    'InnerTrkAvgDist',
    'SumPtTrkFrac',
    'EMPOverTrkSysP',
    'etOverPtLeadTrk',
    'AbsipSigLeadTrk_BS',
    'approx_ptRatio',
    'ChPiEMEOverCaloEME',
]

features_mp = [
    'dRmax',
    'InnerTrkAvgDist',
    'etOverPtLeadTrk',
    'trFlightPathSig',
    'massTrkSys',
    'ChPiEMEOverCaloEME',
    'EMPOverTrkSysP',
    'centFrac',
    'approx_ptRatio',
    'approx_vistau_m',
]


def classifiers(cat, features, ncorr=0):

    new_features = []
    for i, f in enumerate(features):
        if i < ncorr:
            new_features.append(f + '_pileup_corrected')
        else:
            new_features.append(f)
    
    print new_features
    cls_odd = Classifier(
        cat, 'weights/summary_1p_odd_ncorr{0}.root'.format(ncorr),
        '{0}_odd_ncorr{1}'.format(cat.name, ncorr), 
        training_mode='prod',
        features=new_features,
        split_cut='eventnumber%2==0')

    cls_even = Classifier(
        cat, 'weights/summary_1p_even_ncorr{0}.root'.format(ncorr),
        '{0}_even_ncorr{1}'.format(cat.name, ncorr), 
        training_mode='prod',
        features=new_features,
        split_cut='eventnumber%2!=0')

    return cls_odd, cls_even


class Job(Process):
    def __init__(self, cls, **kwargs):
        super(Job, self).__init__()
        self.cls = cls
        self.kwargs = kwargs
    def run(self):
        self.cls.train(**self.kwargs)


if __name__ == '__main__':
    from rootpy.extern.argparse import ArgumentParser
    from tauperf.jobs import run_pool

    parser = ArgumentParser()
    parser.add_argument('--jobs', type=int, default=-1)
    args = parser.parse_args()

    jobs = []
    for ncorr in xrange(len(features_1p) + 1):
        clses = classifiers(Category_1P_HLT, features_1p, ncorr=ncorr)
        jobs.append(Job(clses[0]))
        jobs.append(Job(clses[1]))

    print jobs
    print len(jobs)
    run_pool(jobs, n_jobs=args.jobs)
