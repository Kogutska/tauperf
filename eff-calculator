#!/usr/bin/env python
import os
# ROOT/rootpy imports
from rootpy import ROOT
from rootpy.extern import argparse
from rootpy.io import root_open
from rootpy.tree import TreeChain
from rootpy.plotting import Efficiency, Hist
# local imports
from tauid.plotting import get_hist_array, get_efficiency_array
from tauid import VARIABLES
from tauid.categories import TauCategories, TrueCategories
from tauid.tauid import get_IDtools

#--> Receive and parse argument
parser = argparse.ArgumentParser()
parser.add_argument("input_file_list",
                    help="the list (txt file) of the input files")
parser.add_argument("output_file",
                    help="the name of the output root file")
parser.add_argument('--signal', action='store_true', default=False,
                    help="Sample type signal/bkg")
parser.add_argument("-N","--Nentries", type=int, default=-1,
                    help="Specify the number of events use to run")
args = parser.parse_args()
parser.print_usage()

# --> Import data files
file_list = []
inputfile = open(args.input_file_list)
for ifile in inputfile:
    file_list.append(ifile.strip())

tauCell = TreeChain('tauCell_test', file_list, events=args.Nentries)
tauCell.define_object(name='tau', prefix='off_')
tauCell.define_object(name='L1_tau', prefix='L1_OfflineMatched_')
if args.signal:
    tauCell.define_object(name='truetau', prefix='true_')

# ---> ID_Tools 
ID_Tools = get_IDtools()

# --> Plotting category
plot_cat = ["all", "1p", "mp"]
plot_cat_true = ['1p', '1p_0n', '1p_Xn', '3p', '3p_0n', '3p_Xn']
variables = VARIABLES['plotting_id']

# --> Declaration of the list (python dictionary) of TEfficiency objects
Efficiencies = {}
hist_array = {}
hist_array_true = {}
for cat in plot_cat:
    hist_array[cat] = get_hist_array()
    Efficiencies[cat] = {}
    for tool in ID_Tools:
        Efficiencies[cat][tool] = get_efficiency_array()
for cat in plot_cat_true:
    hist_array_true[cat] = get_hist_array() 


#--------------------------------------------------------------
#-------------> loop OVER THE EVENTS OF THE INPUT TREE --------
#--------------------------------------------------------------

for event in tauCell:
    tau = event.tau
    L1_tau = event.L1_tau
    if args.signal:
        truetau = event.truetau

    if args.signal and tau.index_matched_true<=-1:
        continue
    if L1_tau.index<=-1:
        continue
    if L1_tau.pt<8000.:
        continue
    if tau.pt<25000.:
        continue

    categories = TauCategories(tau).category+['all']
    if args.signal:
        true_categories = TrueCategories(truetau).category
        for cat in true_categories:
            if not cat in plot_cat_true:
                continue
            for var, hist in hist_array_true[cat].items():
                if hasattr(tau, var):
                    hist.Fill(getattr(tau, var))
                else:
                    hist.Fill(getattr(event, var))

    for cat in categories:
        if not cat in plot_cat:
            continue
        for var, hist in hist_array[cat].items():
            if hasattr(tau, var):
                hist.Fill(getattr(tau, var))
            else:
                hist.Fill(getattr(event, var))
        for tool in ID_Tools:
            is_passed = ID_Tools[tool].Decision(tau)
            for var, hist in Efficiencies[cat][tool].items():
                if hasattr(tau, var):
                    Efficiencies[cat][tool][var].Fill(is_passed, getattr(tau, var))
                else:
                    Efficiencies[cat][tool][var].Fill(is_passed, getattr(event, var))

#--------------------------------------------------------------
#-------------> END OF THE LOOP OVER THE EVENTS        --------
#--------------------------------------------------------------


#--------------------------------------------------------------
#-------------> EFFICIENCY STORING       - --------------------
#--------------------------------------------------------------

with root_open(args.output_file, "recreate") as output:
    root_directory = output.CurrentDirectory()
    for cat in plot_cat:
        directory = output.mkdir(cat)
        directory.cd()
        for var, hist in hist_array[cat].items():
            hist.name = 'h_{0}_{1}'.format(cat, var)
            hist.Write()
        for tool in Efficiencies[cat].keys():
            for var, eff in Efficiencies[cat][tool].items():
                eff.SetName('eff_{0}_{1}_{2}'.format(cat, tool, var))
                eff.Write()
        root_directory.cd()
    if args.signal:
        for cat in plot_cat_true:
            directory = output.mkdir('true_'+cat)
            directory.cd()
            for var, hist in hist_array_true[cat].items():
                hist.name = 'h_{0}_{1}'.format(cat, var)
                hist.Write()
            root_directory.cd()
