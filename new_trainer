#!/usr/bin/env python
import rootpy
rootpy.log.basic_config_colorized()

from rootpy import asrootpy
from rootpy.io import root_open
from rootpy.extern import argparse
from rootpy.plotting.style import set_style
from rootpy.plotting import Hist, Hist2D, Canvas
import ROOT

from tauid.trainer import BDTScan
from tauid.trainer import trainer
from tauid.jobs import run_pool
from tauid import VARIABLES
from tauid import log; log=log[__name__]
import fileinput

ROOT.gROOT.SetBatch(True)

#--> Receive and parse argument
parser = argparse.ArgumentParser()
parser.add_argument("actions", choices=['train', 'presel_test', 'full_test'])
parser.add_argument("--sig-file", help="the input sig list (txt file)")
parser.add_argument("--bkg-file", help="the input bkg list (txt file)")
parser.add_argument("--factory-prefix", help="the basename of the training result", default='test')
parser.add_argument("--ID", help="the ID menu trained (full/presel)",
                    default='presel', choices=['presel', 'full'] )
parser.add_argument("--cat", help="the category used for training", default='all',
                    choices=['all', '1p', '3p', 'mp', '1p_0n', '1p_Xn', '3p_0n', '3p_Xn'] )
parser.add_argument("--ecm", help="the center of mass energy (8TeV/14TeV)",
                    default='14TeV', choices=['14TeV', '8TeV'])
parser.add_argument("--object-type", help="the sample type", default="offline", choices=['EF', 'offline'])
parser.add_argument("--N","--Nentries", help="Specify the number of events use to run", type=int, default=-1)
args = parser.parse_args()
parser.print_usage()


# --> Import signal and bkg trees
sig_tree = ROOT.TChain('tauCell_train')
bkg_tree = ROOT.TChain('tauCell_train')

for ifile in open(args.sig_file):
    sig_tree.Add(ifile.strip())
for ifile in open(args.bkg_file):
    bkg_tree.Add(ifile.strip())

tau_cat_cut   = {}
if 'EF' in args.object_type:
    tau_cat_cut["all"]     = ROOT.TCut("EF_numTrack>0")
    tau_cat_cut["1p"]      = ROOT.TCut("EF_numTrack==1")
    tau_cat_cut["3p"]      = ROOT.TCut("EF_numTrack==3")
    tau_cat_cut["mp"]      = ROOT.TCut("EF_numTrack>1")
    tau_cat_cut["1p_0n"]   = ROOT.TCut("EF_numTrack==1 && pi0BDTPrimary>0.47")
    tau_cat_cut["3p_0n"]   = ROOT.TCut("EF_numTrack==3 && pi0BDTPrimary>0.47")
    tau_cat_cut["1p_Xn"]   = ROOT.TCut("EF_numTrack==1 && pi0BDTPrimary<0.47")
    tau_cat_cut["3p_Xn"]   = ROOT.TCut("EF_numTrack==3 && pi0BDTPrimary<0.47")

trigger_cut = {}
trigger_cut["14TeV"] = ROOT.TCut("L2_L2_tau20_medium==1")
trigger_cut["8TeV"]  = ROOT.TCut("EF_tauNoCut==1")

#---> Signal and Bkg selection
matching = ROOT.TCut("EF_ismatched==1 && L2_ismatched==1 && L1_ismatched==1")
eta_cut  = ROOT.TCut("EF_eta<2.2 && EF_eta>-2.2")

if 'offline' in args.object_type:
    matching = ROOT.TCut("L1_OfflineMatched_index>-1 && L1_OfflineMatched_pt>8000.")
    eta_cut  = ROOT.TCut("off_eta<2.2 && off_eta>-2.2")
    tau_cat_cut["all"]     = ROOT.TCut("off_numTrack>0")
    tau_cat_cut["1p"]      = ROOT.TCut("off_numTrack==1")
    tau_cat_cut["3p"]      = ROOT.TCut("off_numTrack==3")
    tau_cat_cut["mp"]      = ROOT.TCut("off_numTrack>1")
    tau_cat_cut["1p_0n"]   = ROOT.TCut("off_numTrack==1 && off_pi0BDTPrimary>0.47")
    tau_cat_cut["3p_0n"]   = ROOT.TCut("off_numTrack==3 && off_pi0BDTPrimary>0.47")
    tau_cat_cut["1p_Xn"]   = ROOT.TCut("off_numTrack==1 && off_pi0BDTPrimary<0.47")
    tau_cat_cut["3p_Xn"]   = ROOT.TCut("off_numTrack==3 && off_pi0BDTPrimary<0.47")

truth    = ROOT.TCut("off_index_matched_true>-1")
bkgcut  =  matching
bkgcut += eta_cut
if 'EF' in args.object_type:
    bkgcut  += trigger_cut[args.ecm]
bkgcut  += tau_cat_cut[args.cat]
sigcut  = bkgcut+truth
print '-------- bkg cut --------'
print bkgcut
print '-------- sig cut --------'
print sigcut


# --------------------------------------------------------
# -------------> BDT TRAINING       <---------------------
# --------------------------------------------------------
# output_name  = 'tmp/'+args.factory_suffix+'_'+args.cat+'_'+args.ecm+'_'+args.object_type+'_'+args.ID+'.root'
# factory_name = '{0}_{1}_{2}_{3}'.format(args.factory_suffix, args.cat,
#                                         args.ecm, args.object_type)


# output_file = root_open(output_name, 'recreate')
# factory = trainer(factory_name, output_file)
# factory.SetVariablesFromList(VARIABLES['presel_2'])
# factory.SetInputTrees(sig_tree, bkg_tree)
# factory.PrepareTrainingAndTestTree(sigcut, bkgcut, "NormMode=EqualNumEvents:SplitMode=Block:!V")
# factory.BookBDT()
# # --> Train MVAs using the set of training events
# factory.TrainAllMethods()
# # --> Evaluate all MVAs using the set of test events
# factory.TestAllMethods()
# # --> Evaluate and compare performance of all configured MVAs
# factory.EvaluateAllMethods()




outputs = []
nevts_list = [10, 50, 100, 500, 1000, 5000, 10000]
ntrees_list = [50*i for i in range(1,7)]


for nevts in nevts_list:
    for ntrees in ntrees_list:
        output_name  = 'tmp/{0}_{1}_{2}_{3}_{4}_nevts{5}_ntrees{6}.root'.format(args.factory_prefix, args.cat,
                                                                                args.ecm, args.object_type,
                                                                                args.ID, nevts, ntrees)
        factory_name = '{0}_{1}_{2}_{3}_{4}'.format(args.factory_prefix, args.cat,
                                                    args.ecm, args.object_type, args.ID)
        outputs.append((output_name, factory_name, nevts, ntrees))

if 'train' in args.actions:
    workers = []
    for output in outputs:
        (output_name, factory_name, ntrees, nevts) = output
        workers.append(BDTScan(output_name,factory_name, VARIABLES['presel_2'],
                               sig_tree, bkg_tree, sigcut, bkgcut, ntrees, nevts))
        
    run_pool(workers, n_jobs=-1)


set_style('ATLAS', shape='rect')
if 'presel_test' in args.actions:
    Scan = Hist2D(nevts_list, ntrees_list, type='F')
    Scan.name = 'Scan'
    Scan.xaxis.title = 'Mininal Number of Events per Node'
    Scan.yaxis.title = 'Number of Trees'
    for output in outputs:
        (output_name, factory_name, nevts, ntrees) = output
        with root_open(output_name) as output_file:
            log.info(output_name)
            key_names = [key.GetName() for key in output_file.Method_BDT.BDT.keys()]
            if 'MVA_BDT_effBvsS' in key_names:
                h = asrootpy(output_file.Method_BDT.BDT.MVA_BDT_effBvsS)
                target = min(enumerate(list(h.x())), key=lambda x: abs(x[1]-0.95))
                target = (target[0], list(h.y())[target[0]])
            else:
                target = (0.95, 0.999)
            
            log.info('{0},{1}: {2}'.format(ntrees, nevts, target))
            Scan.Fill(nevts,ntrees,(1-target[1]))
    Scan.SaveAs('toto.root')
#     c = Canvas()
#     c.SetLogx()
#     Scan.Draw('colzTEXT')
#     c.SaveAs('toto.png')
