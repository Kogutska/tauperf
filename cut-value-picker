#!/usr/bin/env python
import os
import logging
import rootpy
from rootpy.plotting.style import set_style
from rootpy.plotting import Hist, Efficiency, Graph
from rootpy.io import root_open
from tauperf.plotting import draw_efficiencies
from tauperf.plotting.roc import  old_working_points
from tauperf.analysis import Analysis
from tauperf.variables import VARIABLES
from tauperf.cmd import get_parser
from prettytable import PrettyTable

log = logging.getLogger(os.path.basename(__file__))
if not os.environ.get("DEBUG", False):
    log.setLevel(logging.INFO)

rootpy.log.setLevel(logging.INFO)

set_style('ATLAS', shape='rect')

if __name__ == "__main__":

    parser = get_parser('plot')
    parser.add_argument('--jobs', default=-1, type=int)
    parser.add_argument('--score-var', default='hlt_bdt_score_hlt_training_dev', type=str)
    args = parser.parse_args()
    

    ana = Analysis(
        use_drellyan=args.use_dy,
        trigger=args.trigger,
        no_weight=args.no_weight)

    # score_var = 'hlt_bdt_score_{1}_training_dev'.format(wp_level)
    
    score_var = args.score_var

    table = PrettyTable([
            "Category",
            "pt bin",
            "efficiency",
            "cut value"])


    PT_BINS = [(25, 26),]
    PT_BINS += [
        (26 + 2 * i, 26 + 2 * (i + 1)) for i in range(0, 12)
        ]

    PT_BINS += [
        (50 + 4 * i, 50 + 4 * (i + 1)) for i in range(0, 15)
        ]

    PT_BINS += [
        (110, 150), (150, 200), (200, 300)]

    # PT_BINS += [
        
    #     ]

    print PT_BINS

    def cut_values(cat, pt_bins, score_var, level, id_point='medium'):
        vals = []
        for bin in pt_bins:
            h_template = Hist(10000, 0, 1)
            hist = ana.tau.get_hist_array(
                {score_var: h_template},
                category=cat,
                cuts=' {1} <= {0}_pt < {2}'.format(
                    level, bin[0] * 1e3, bin[1] * 1e3))
            hist = hist[score_var]

            bin = -1
            for ibin in xrange(hist.GetNbinsX()):
                eff = (hist.Integral() - hist.Integral(0, ibin)) / hist.Integral()
                if eff < cat.eff_target[id_point]:
                    bin = ibin
                    cut_val = hist.GetBinLowEdge(bin)
                    vals.append(cut_val)
                    break
        return vals
            # print hist.Integral(), hist.Integral(0, ibin), hist.GetBinContent(ibin)

    for cat in ana.iter_categories(args.categories):

        print 'loose'
        cut_vals_loose = cut_values(cat, PT_BINS, score_var, args.level, 'loose')

        print 'medium'
        cut_vals_med = cut_values(cat, PT_BINS, score_var, args.level, 'medium')

        print 'tight'
        cut_vals_tight = cut_values(cat, PT_BINS, score_var, args.level, 'tight')

        PT_BINS_EXT = [(0, 25)] + PT_BINS + [(300, 1e5)]
        cut_vals_loose = [cut_vals_loose[0]] + cut_vals_loose + [cut_vals_loose[-1]]
        cut_vals_med = [cut_vals_med[0]] + cut_vals_med + [cut_vals_med[-1]]
        cut_vals_tight = [cut_vals_tight[0]] + cut_vals_tight + [cut_vals_tight[-1]]



        for ibin, (pt_bin, c_l, c_m, c_t) in enumerate(zip(PT_BINS_EXT, cut_vals_loose, cut_vals_med, cut_vals_tight)):
            print pt_bin[0], '\t', pt_bin[1], '\t', '{0:1.5f}'.format(c_l), '\t', '{0:1.5f}'.format(c_m), '\t', '{0:1.5f}'.format(c_t)
