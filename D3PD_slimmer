#!/usr/bin/env python

from helpers import AnalysisTools
import sys

from rootpy.extern import argparse
from rootpy import stl
from rootpy import log

log.basic_config_colorized()

stl.vector( 'vector<int>' )
stl.vector( 'vector<float>' )

import ROOT
from skim_tools.TruthTauLoader          import TruthTauLoader
from skim_tools.RecoTauLoader           import RecoTauLoader
from skim_tools.TrigTauLoader           import EFTauLoader,L2TauLoader,L1TauLoader
from skim_tools.SlimTree                import SlimTree

ROOT.gROOT.ProcessLine(".x $ROOTCOREBIN/scripts/load_packages.C")
print 'rootcore libraries loaded'


#--> Receive and parse argument
parser = argparse.ArgumentParser()
parser.add_argument("input_rootfile", help="the input rootfile name")
parser.add_argument("output_rootfile", help="the output rootfile name")
parser.add_argument("sample_type", help="sample type (signal_14TeV,signal_8TeV,background_14TeV,data")
parser.add_argument("-N","--Nentries", type=int,default=-1,help="Specify the number of events use to run")
args = parser.parse_args()
parser.print_usage()




#--> Open input file
print 'open file '+args.input_rootfile
in_file = ROOT.TFile.Open(args.input_rootfile)
print 'get d3pd tree'
d3pd_tree = in_file.Get('tau')

# --> Indicate variables to compute and to fill in output tree
# Include = ['basic','EDMVariables', 'TauID']
Include = ['basic','EDMVariables', 'TauID', 'recoObjects','Pi0Finder']

if '14TeV' in args.sample_type: Include += ['trigger_14TeV']
if 'signal' in args.sample_type: Include += ['truth']
    


print Include
#--> Create output file and tree
print 'create file '+args.output_rootfile
out_file  = ROOT.TFile(args.output_rootfile,"RECREATE")
slim_tree = SlimTree('tauCell','all',Include,False)

#--> Get number of entries in input tree
nEvents = d3pd_tree.GetEntries()
if args.Nentries !=-1:
    nEvents = args.Nentries
print 'Number of events: ' + str(nEvents)


#--------------------------------------------------------------
#-------------> LOOP OVER THE EVENTS OF THE INPUT TREE --------
#--------------------------------------------------------------
for i in range(0, nEvents):
    slim_tree.ResetBranches()
    d3pd_tree.GetEntry(i)
    AnalysisTools.Processing(i,nEvents,int(nEvents/100))

    # --> Fill event level informations
    slim_tree.variables['runnumber'][0][0] = d3pd_tree.RunNumber
    slim_tree.variables['evtnumber'][0][0] = d3pd_tree.EventNumber
    slim_tree.variables['lumiblock'][0][0] = d3pd_tree.lbn
    slim_tree.variables['npv'      ][0][0] = d3pd_tree.evt_calcVars_numGoodVertices
    slim_tree.variables['mu'       ][0][0] = d3pd_tree.averageIntPerXing

    slim_tree.variables['EF_tau20_medium1'][0][0] = d3pd_tree.EF_tau20_medium1
    slim_tree.variables['EF_tauNoCut'][0][0]      = d3pd_tree.EF_tauNoCut      
    slim_tree.variables['L2_tauNoCut'][0][0]      = d3pd_tree.L2_tauNoCut      
    slim_tree.variables['L1_TAU8'    ][0][0]      = d3pd_tree.L1_TAU8             
    slim_tree.variables['L1_TAU11I'  ][0][0]      = d3pd_tree.L1_TAU11I

    if '14TeV' in args.sample_type:
        slim_tree.variables['L2_tau18Ti_loose2_e18vh_medium1'][0][0] = d3pd_tree.L2_tau18Ti_loose2_e18vh_medium1 


#     nEFTaus = d3pd_tree.trig_EF_tau_n
#     nL2Taus = d3pd_tree.trig_L2_tau_n
#     nL1Taus = d3pd_tree.trig_L1_emtau_n
#     print '***********************************'
#     print 'Event Number:' + str(d3pd_tree.EventNumber)
#     for i in range(0,nL1Taus):
#         L1_word = d3pd_tree.trig_L1_emtau_RoIWord[i]
#         for j in range(0,nL2Taus):
#             L2_word = d3pd_tree.trig_L2_tau_RoIWord[j]
#             if L2_word != L1_word: continue
#             print '--------------------'
#             print 'Indices:   L2-->'+str(j)+', L1-->'+str(i)
#             print 'RoI words: L2-->'+str(L2_word)+', L1-->'+str(L1_word)
#             print 'eta:       L2-->'+str(d3pd_tree.trig_L2_tau_eta[j])+', L1-->'+str(d3pd_tree.trig_L1_emtau_eta[i])
#             print 'phi:       L2-->'+str(d3pd_tree.trig_L2_tau_phi[j])+', L1-->'+str(d3pd_tree.trig_L1_emtau_phi[i])
#             for k in range(0,nEFTaus):
#                 EF_word = d3pd_tree.trig_EF_tau_RoIWord[k]
#                 if EF_word != L2_word: continue
#                 print '--------------------'
#                 print 'Indices: EF-->'+str(k)+', L2-->'+str(j)+', L1-->'+str(i)
#                 print 'RoI words: EF-->'+str(EF_word)+', L2-->'+str(L2_word)+', L1-->'+str(L1_word)
#                 print 'eta: EF-->'+str(d3pd_tree.trig_EF_tau_eta[k])+', L2-->'+str(d3pd_tree.trig_L2_tau_eta[j])+', L1-->'+str(d3pd_tree.trig_L1_emtau_eta[i])
#                 print 'phi: EF-->'+str(d3pd_tree.trig_EF_tau_phi[k])+', L2-->'+str(d3pd_tree.trig_L2_tau_phi[j])+', L1-->'+str(d3pd_tree.trig_L1_emtau_phi[i])



    #--> Get number of reconstructed taus
    nTaus = d3pd_tree.tau_n
    # ------------------------------------
    #--> LOOP THROUGH THE RECONSTRUCTED TAUS
    # ------------------------------------
    for tau_ind in range(0, nTaus):
        # --> Call RecoTauLoader
        reco_tau = RecoTauLoader(d3pd_tree,tau_ind,Include)
        if reco_tau.author != 3:
            continue
        # ---> Basics tau kinematics (from tau_pt,tau_eta,tau_phi) D3PD branches
        slim_tree.variables['p'  ][0][0] = reco_tau.reco4Vector.P()
        slim_tree.variables['pt' ][0][0] = reco_tau.reco4Vector.Pt()
        slim_tree.variables['eta'][0][0] = reco_tau.reco4Vector.Eta()
        slim_tree.variables['phi'][0][0] = reco_tau.reco4Vector.Phi()

        # ---> Matching of reco to L1 RoI
        L1tau_fromreco = L1TauLoader(d3pd_tree,reco_tau.L1Index,['basic'])
        slim_tree.variables['hasL1matched'][0][0] = L1tau_fromreco.hasL1matched
        if L1tau_fromreco.hasL1matched:
            L1tau_fromreco_4vec = L1tau_fromreco.L1_4Vector
            slim_tree.variables['L1matched_pt'][0][0] = L1tau_fromreco_4vec.Pt()
            
        # ---> Truth level tau information (for signal sample only)
        if 'signal' in args.sample_type:
            slim_tree.variables['truth_ismatched'][0][0] = reco_tau.hasTruth
            slim_tree.variables['truth_index'][0][0] = reco_tau.truthIndex
            slim_tree.variables['truth_ismatched_dr'][0][0] = reco_tau.hasTruth_dR
            slim_tree.variables['truth_index_dr'][0][0] = reco_tau.truthIndex_alt
            if reco_tau.hasTruth:
                truth_tau = TruthTauLoader(d3pd_tree,reco_tau.getTruthIndex(),Include)
                slim_tree.variables['truth_p'   ][0][0] = truth_tau.truthVis4Vector.P()                    
                slim_tree.variables['truth_pt'  ][0][0] = truth_tau.truthVis4Vector.Pt()
                slim_tree.variables['truth_mass'][0][0] = truth_tau.truthVis4Vector.M()
                slim_tree.variables['truth_eta'][0][0]  = truth_tau.truthVis4Vector.Eta()
                slim_tree.variables['truth_phi'][0][0]  = truth_tau.truthVis4Vector.Phi()
                slim_tree.variables['nProngs'   ][0][0] = truth_tau.nProngs
                slim_tree.variables['nPi0s'     ][0][0] = truth_tau.nPi0s

        # --> Track Variables (used TJVA corrected tracks)
        slim_tree.variables['numTrack'][0][0] = reco_tau.numTrack
        slim_tree.variables['nTracks' ][0][0] = reco_tau.nTracks
        
        # ---> wide tracks variables 
        slim_tree.variables['nWideTrk'][0][0] = reco_tau.nWideTrk       
        
        # ---> other tracks variables 
        slim_tree.variables['notherTrk'][0][0] = reco_tau.notherTrk
        
        # ---> Michel's BDT pi0s counting outputs
        slim_tree.variables['pi0BDTPrimary'  ][0][0] = reco_tau.pi0BDTPrimary
        slim_tree.variables['pi0BDTSecondary'][0][0] = reco_tau.pi0BDTSecondary
                
        # ---> Identification BDT results (3 working points: loose, medium and tight)
        slim_tree.variables['BDTloose' ][0][0] = reco_tau.BDTloose
        slim_tree.variables['BDTmedium'][0][0] = reco_tau.BDTmedium
        slim_tree.variables['BDTtight' ][0][0] = reco_tau.BDTtight

        # ---> Input variables for Michel's pi0 counting algorithm
        slim_tree.variables['EMPOverTrkSysP'    ][0][0] = reco_tau.EMPOverTrkSysP
        slim_tree.variables['ChPiEMEOverCaloEME'][0][0] = reco_tau.ChPiEMEOverCaloEME
        slim_tree.variables['PSSFraction'       ][0][0] = reco_tau.PSSFraction
        slim_tree.variables['EtOverLeadTrackPt' ][0][0] = reco_tau.etOverPt
        slim_tree.variables['nStrip'            ][0][0] = reco_tau.nStrip
        slim_tree.variables['nEffStripCells'    ][0][0] = reco_tau.nEffStripCells
        
        # ---> Input variables for the ID BDT
        slim_tree.variables['corrCentFrac'][0][0]    = reco_tau.corrCentFrac   
        slim_tree.variables['centFrac'    ][0][0]    = reco_tau.centFrac       
        slim_tree.variables['isolFrac'    ][0][0]    = reco_tau.isolFrac       
        slim_tree.variables['corrFTrk'    ][0][0]    = reco_tau.corrFTrk       
        slim_tree.variables['trkAvgDist'  ][0][0]    = reco_tau.trkAvgDist     
        slim_tree.variables['ipSigLeadTrk'][0][0]    = reco_tau.ipSigLeadTrk   
        slim_tree.variables['pi0_ptratio'][0][0]     = reco_tau.pi0_ptratio    
        slim_tree.variables['pi0_vistau_m'   ][0][0] = reco_tau.pi0_vistau_m   
        slim_tree.variables['pi0_n_reco'     ][0][0] = reco_tau.pi0_n          
        slim_tree.variables['trFlightPathSig'][0][0] = reco_tau.trFlightPathSig
        slim_tree.variables['massTrkSys'     ][0][0] = reco_tau.massTrkSys     
        slim_tree.variables[ 'dRmax' ]        [0][0] = reco_tau.dRmax
        slim_tree.variables['EMRadius'   ][0][0]     = reco_tau.EMRadius
        slim_tree.variables['HadRadius'  ][0][0]     = reco_tau.HadRadius
        slim_tree.variables['EMEnergy'   ][0][0]     = reco_tau.EMEnergy 
        slim_tree.variables['HadEnergy'  ][0][0]     = reco_tau.HadEnergy
        slim_tree.variables['CaloRadius' ][0][0]     = reco_tau.CaloRadius
        slim_tree.variables['stripWidth2'][0][0]     = reco_tau.stripWidth2
        slim_tree.variables['clbased_pt'][0][0]      = reco_tau.clbased_pT

        slim_tree.variables['numTopoClusters']    [0][0] = reco_tau.numTopoClusters    
        slim_tree.variables['numEffTopoClusters'] [0][0] = reco_tau.numEffTopoClusters 
        slim_tree.variables['topoInvMass']        [0][0] = reco_tau.topoInvMass        
        slim_tree.variables['effTopoInvMass']     [0][0] = reco_tau.effTopoInvMass     
        slim_tree.variables['topoMeanDeltaR']     [0][0] = reco_tau.topoMeanDeltaR     
        slim_tree.variables['effTopoMeanDeltaR']  [0][0] = reco_tau.effTopoMeanDeltaR  
        slim_tree.variables['lead2ClusterEOverAllClusterE' ][0][0] = reco_tau.lead2ClusterEOverAllClusterE
        slim_tree.variables['lead3ClusterEOverAllClusterE' ][0][0] = reco_tau.lead3ClusterEOverAllClusterE
        slim_tree.variables['EMFractionAtEMScale']          [0][0] = reco_tau.EMFractionAtEMScale 

        # ----------------------------------------------------
        # ------ EVENT FILTER LEVEL VARIABLES
        # ----------------------------------------------------
        EFtau = EFTauLoader(d3pd_tree,reco_tau.EFIndex,Include)
        # ---> Offline/EF matching variables
        slim_tree.variables['EF_DeltaR_EF_off'][0][0] = reco_tau.DeltaR_EF_off
        slim_tree.variables['EF_ismatched'][0][0] = EFtau.hasEFmatched
        if EFtau.hasEFmatched:
            # ---> Basics tau kinematics at EventFilter level
            slim_tree.variables['EF_p'  ][0][0] = EFtau.EF4Vector.P()
            slim_tree.variables['EF_pt' ][0][0] = EFtau.EF4Vector.Pt()
            slim_tree.variables['EF_eta'][0][0] = EFtau.EF4Vector.Eta()
            slim_tree.variables['EF_phi'][0][0] = EFtau.EF4Vector.Phi()
            # --> Matching to the trigger chain
            slim_tree.variables['EF_EF_tau20_medium1'][0][0] = EFtau.tau20_medium1
            slim_tree.variables['EF_EF_tauNoCut'     ][0][0] = EFtau.tauNoCut
            # --> Track Variables
            slim_tree.variables['EF_numTrack'][0][0] = EFtau.numTrack
            slim_tree.variables['EF_nTracks' ][0][0] = EFtau.nTracks

            # ---> wide tracks variables 
            slim_tree.variables['EF_nWideTrk'][0][0] = EFtau.nWideTrk       
                    
            # ---> other tracks variables 
            slim_tree.variables['EF_notherTrk'][0][0] = EFtau.notherTrk
                    
            # ---> Michel's BDT pi0s counting outputs
            slim_tree.variables['EF_pi0BDTPrimary'  ][0][0] = EFtau.pi0BDTPrimary
            slim_tree.variables['EF_pi0BDTSecondary'][0][0] = EFtau.pi0BDTSecondary

            # ---> Input variables for Michel's pi0 counting algorithm
            slim_tree.variables['EF_EMPOverTrkSysP'    ][0][0] = EFtau.EMPOverTrkSysP 	
            slim_tree.variables['EF_ChPiEMEOverCaloEME'][0][0] = EFtau.ChPiEMEOverCaloEME   
            slim_tree.variables['EF_PSSFraction'       ][0][0] = EFtau.PSSFraction
            slim_tree.variables['EF_EtOverLeadTrackPt' ][0][0] = EFtau.etOverPt
            slim_tree.variables['EF_nStrip'            ][0][0] = EFtau.nStrip 	        
            # slim_tree.variables['EF_nEffStripCells'][0][0] = EFtau.nEffStripCells 	

            # ---> Input variables for the ID BDT
            slim_tree.variables['EF_corrCentFrac'][0][0] = EFtau.corrCentFrac   
            slim_tree.variables['EF_centFrac'    ][0][0] = EFtau.centFrac       
            slim_tree.variables['EF_corrFTrk'    ][0][0] = EFtau.corrFTrk       
            slim_tree.variables['EF_trkAvgDist'  ][0][0] = EFtau.trkAvgDist     
            slim_tree.variables['EF_ipSigLeadTrk'][0][0] = EFtau.ipSigLeadTrk   
            # slim_tree.variables['EF_pi0_ptratio'][0][0] = EFtau.pi0_ptratio    
            slim_tree.variables['EF_pi0_vistau_m'   ][0][0] = EFtau.pi0_vistau_m   
            slim_tree.variables['EF_trFlightPathSig'][0][0] = EFtau.trFlightPathSig
            slim_tree.variables['EF_massTrkSys'     ][0][0] = EFtau.massTrkSys     
            slim_tree.variables['EF_topoMeanDeltaR' ][0][0] = EFtau.topoMeanDeltaR
            slim_tree.variables[ 'EF_CaloRadius' ][0][0]  = EFtau.CaloRadius
            slim_tree.variables[ 'EF_HADRadius' ]  [0][0] = EFtau.HADRadius
            slim_tree.variables[ 'EF_IsoFrac' ]    [0][0] = EFtau.IsoFrac
            slim_tree.variables[ 'EF_EMFrac' ]     [0][0] = EFtau.EMFrac
            slim_tree.variables[ 'EF_stripWidth' ] [0][0] = EFtau.stripWidth
            slim_tree.variables[ 'EF_dRmax' ]      [0][0] = EFtau.dRmax

            # ----------------------------------------------------
            # ------ LEVEL TWO VARIABLES
            # ----------------------------------------------------
            L2tau = L2TauLoader(d3pd_tree,EFtau.getL2TauIndex(),Include)
            # ---> Offline/EF matching variables
            slim_tree.variables['L2_ismatched'][0][0] = L2tau.hasL2matched
            if L2tau.hasL2matched:
                slim_tree.variables['L2_L2_tau20_medium']                [0][0] = L2tau.tau20_medium                                
                slim_tree.variables['L2_L2_tau20_medium1']               [0][0] = L2tau.tau20_medium1                                
                slim_tree.variables['L2_L2_tauNoCut'    ]                [0][0] = L2tau.tauNoCut                                
                if '14TeV' in args.sample_type:
                    slim_tree.variables['L2_L2_tau18Ti_loose2_e18vh_medium1'][0][0] = L2tau.tau18Ti_loose2_e18vh_medium1
                # ---> Basics tau kinematics at EventFilter level
                slim_tree.variables['L2_p'  ][0][0] = L2tau.L2_4Vector.P()
                slim_tree.variables['L2_pt' ][0][0] = L2tau.L2_4Vector.Pt()
                slim_tree.variables['L2_eta'][0][0] = L2tau.L2_4Vector.Eta()
                slim_tree.variables['L2_phi'][0][0] = L2tau.L2_4Vector.Phi()
                
                # ---> Input variables for the ID BDT
                slim_tree.variables[ 'L2_CaloRadius' ][0][0]  = L2tau.CaloRadius
                slim_tree.variables[ 'L2_HADRadius' ]  [0][0] = L2tau.HADRadius
                slim_tree.variables[ 'L2_IsoFrac' ]    [0][0] = L2tau.IsoFrac
                slim_tree.variables[ 'L2_EMFrac' ]     [0][0] = L2tau.EMFrac
                slim_tree.variables[ 'L2_stripWidth' ] [0][0] = L2tau.stripWidth
                slim_tree.variables[ 'L2_HADtoEMEnergy' ]  [0][0] = L2tau.HADtoEMEnergy
                slim_tree.variables[ 'L2_EnergyTonCells' ] [0][0] = L2tau.EnergyTonCells
                # ----------------------------------------------------
                # ------ LEVEL ONE VARIABLES
                # ----------------------------------------------------
                L1tau = L1TauLoader(d3pd_tree,L2tau.getL1TauIndex(),Include)
                # ---> Offline/EF matching variables
                slim_tree.variables['L1_ismatched'][0][0] = L1tau.hasL1matched
                if L1tau.hasL1matched:
                    # ---> Basics tau kinematics at EventFilter level
                    slim_tree.variables['L1_p'  ][0][0] = L1tau.L1_4Vector.P()
                    slim_tree.variables['L1_pt' ][0][0] = L1tau.L1_4Vector.Pt()
                    slim_tree.variables['L1_eta'][0][0] = L1tau.L1_4Vector.Eta()
                    slim_tree.variables['L1_phi'][0][0] = L1tau.L1_4Vector.Phi()
                    # -----------------------------------------------------------
                # -----------------------------------------------------------
                # -----  END OF THE L1 BLOCK --------------------------------
                # -----------------------------------------------------------
            # ----------------------------------------------------
            # ------ END OF L2 BLOCK 
            # ----------------------------------------------------
        # ----------------------------------------------------
        # ------ END OF EF BLOCK
        # ----------------------------------------------------
        # ----------------------------------------------------
        # ------ TREE FILLING
        # ----------------------------------------------------
        slim_tree.Fill()

# --> Write tree and close
slim_tree.Write()
out_file.Write()
out_file.Close()
