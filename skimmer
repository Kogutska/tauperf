#!/usr/bin/env python
# ---> rootpy imports
from rootpy.extern import argparse
from rootpy.tree import TreeChain, Tree
from rootpy.io import root_open
from rootpy import stl
stl.vector('vector<int>')
stl.vector('vector<float>')
# ---> local imports
from skim.edm import *
from skim.filters import *
from skim.objects import define_objects
from skim import log; log.basic_config_colorized()
# ---> ROOT imports
import ROOT
ROOT.gROOT.ProcessLine(".x $ROOTCOREBIN/scripts/load_packages.C")
print 'rootcore libraries loaded'

#--> Receive and parse argument
parser = argparse.ArgumentParser()
parser.add_argument("input", help="the input rootfile name")
parser.add_argument("output", help="the output rootfile name")
parser.add_argument("sample_type", help="sample type", choices=['signal_14TeV', 'signal_8TeV', 'background_14TeV', 'data'])
parser.add_argument("-N","--Nentries", type=int,default=-1,help="Specify the number of events use to run")
args = parser.parse_args()
parser.print_usage()

#--> Open input file
log.info('Get d3pd tree')
d3pd_tree = TreeChain('tau', args.input, events=args.Nentries)
define_objects(d3pd_tree)

#--> Create output file 
out_file = root_open(args.output, "recreate")
log.info('Create output file: {0}'.format(args.output))
slim_tree = Tree('tauCell', model=EventInfoBlock+RecoTauBlock+TrueTauBlock+EFTauBlock+L2TauBlock+L1TauBlock+L1_OfflineMatched_TauBlock )
slim_tree.define_object(name='tau', prefix='off_')
slim_tree.define_object(name='tau_true', prefix='true_')
slim_tree.define_object(name='tau_EF', prefix='EF_')
slim_tree.define_object(name='tau_L2', prefix='L2_')
slim_tree.define_object(name='tau_L1', prefix='L1_')
slim_tree.define_object(name='tau_L1_OfflineMatched', prefix='L1_OfflineMatched_')

#--> Get number of entries in input tree
nEvents=d3pd_tree.GetEntries()
if args.Nentries !=-1:
    nEvents = args.Nentries
log.info('Number of events: {0}'.format(nEvents))

event_filters = [Offline_Truth_matching(),
                 Offline_EF_matching(),
                 Offline_L1_matching(),
                 EF_L2L1_matching(),
                 L2_L1_matching() ]

# ---------------------------------------------------
# ---------------  START THE EVENT LOOP -------------
# ---------------------------------------------------
for event in d3pd_tree:
    log.debug('Loop over the events')
    for filter in event_filters:
        filter.passes(event)
    log.debug('pass the filters')
    for tau in d3pd_tree.taus:
        log.debug('loop over the reco taus')
        EventInfoBlock.set(event, slim_tree)
        RecoTauBlock.set(event, slim_tree, tau)
        # --> Offline to L1 matching
        if tau.index_matched_L1>-1:
            l1tau = d3pd_tree.taus_L1[tau.index_matched_L1]
            L1_OfflineMatched_TauBlock.set(event, slim_tree, l1tau)
        # --> Offline to EF matching
        if tau.index_matched_EF>-1:
            eftau = d3pd_tree.taus_EF[tau.index_matched_EF]
            EFTauBlock.set(event, slim_tree, eftau)
            # --> EF to L2 matching
            if eftau.index_matched_L2>-1:
                l2tau = d3pd_tree.taus_L2[eftau.index_matched_L2]
                L2TauBlock.set(event, slim_tree, l2tau)
                # --> L2 to L1 matching
                if l2tau.index_matched_L1>-1:
                    l1tau = d3pd_tree.taus_L1[l2tau.index_matched_L1]
                    L1TauBlock.set(event, slim_tree, l1tau)
        # --> Offline to Truth matching
        if 'signal' in args.sample_type and tau.index_matched_truth>-1:
            TrueTauBlock.set(event, slim_tree, event.truetaus[tau.index_matched_truth])
        slim_tree.fill(reset=True)
# ---------------------------------------------------
# --------------- END OF THE EVENT LOOP   ----------
# ---------------------------------------------------

slim_tree.FlushBaskets()
slim_tree.Write()
out_file.Close()
log.info('Close {0}'.format(args.output))
