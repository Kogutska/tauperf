#!/usr/bin/env python
import os
import logging
import re
import rootpy
from rootpy.plotting.style import set_style
from rootpy.tree import Cut
from tauperf.analysis import Analysis
from tauperf.cmd import get_parser
from tauperf.variables import VARIABLES
from tauperf.plotting import draw_ratio
from tauperf import UNMERGED_NTUPLE_PATH
log = logging.getLogger(os.path.basename(__file__))
if not os.environ.get("DEBUG", False):
    log.setLevel(logging.INFO)
rootpy.log.setLevel(logging.INFO)
set_style('ATLAS', shape='rect')


if __name__ == "__main__":
    parser = get_parser('plot')				
    parser.add_argument('--dummy-range', action='store_true', default=False)
    args = parser.parse_args()

    cuts = None
    if args.cut:
        cuts = Cut(args.cut)

    ana = Analysis(
        use_drellyan=args.use_dy,
        trigger=args.trigger)

    for cat in ana.iter_categories(args.categories):
        vars = {}
        # vars['pt'] = VARIABLES['pt']
        for v in getattr(cat, args.features):
            vars[v] = VARIABLES[v]
        
        hist_samples_array = ana.get_hist_samples_array(vars, args.level, category=cat, cuts=cuts, dummy_range=args.dummy_range)
        for field, hists_dict in hist_samples_array.items():
            log.info(field)
            plot = draw_ratio(
                hists_dict['tau'], hists_dict['jet'], 
                field, cat, logy=args.logy)
            log.info(plot)
            if args.logy:
                plot.SaveAs(os.path.join('plots/features/', args.level + '_' + field+'_'+cat.name+'_logy.png'))
            else: 
                plot.SaveAs(os.path.join('plots/features/', args.level + '_' + field + '_' + cat.name+'.png'))

    # for cat in ana.iter_categories(args.categories):
    #     hist_samples_array = ana.get_hist_signal_array(vars, 'off', 'hlt', cat, cuts=cuts)
    #     for field, hists_dict in hist_samples_array.items():
    #         plot = draw_ratio(
    #             hists_dict['off'], hists_dict['hlt'], field, cat, 
    #             normalize=False, logy=args.logy)
    #         log.info(plot)
    #         if args.logy:
    #             plot.SaveAs(os.path.join('plots', 'hlt_vs_off_'+field+'_'+cat.name+'_logy.png'))
    #         else:
    #             plot.SaveAs(os.path.join('plots', 'hlt_vs_off_'+field+'_'+cat.name+'.png'))
                               
