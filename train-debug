#!/usr/bin/env python
import os
import logging
import rootpy
from tauperf.analysis import Analysis
from tauperf.categories import Category_1P_HLT
from tauperf.cmd import get_parser
from tauperf import NTUPLE_PATH
log = logging.getLogger(os.path.basename(__file__))
if not os.environ.get("DEBUG", False):
    log.setLevel(logging.INFO)

rootpy.log.setLevel(logging.INFO)

from itertools import combinations
if __name__ == "__main__":

    parser = get_parser()
    parser.add_argument('--jobs', default=-1, type=int)
    args = parser.parse_args()
    
    ana = Analysis(
        ntuple_path=os.path.join(NTUPLE_PATH, 'training'),
        use_drellyan=args.use_dy,
        trigger=args.trigger,
        no_weight=args.no_weight)


    cat = Category_1P_HLT
    length = len(cat.features_pileup_corrected)
    log.info(cat.features_pileup_corrected)

    for i, feat in enumerate(cat.features_pileup_corrected):
        #defensive copy
        feats_i = cat.features_pileup_corrected[:]
        
        feats_i.pop(i)
        print 'features_pileup_corr_no_%s' % feat
        setattr(cat, 'features_pileup_corr_no_%s' % feat, feats_i)


    for feat in cat.features_pileup_corrected:
        if feat != 'SumPtTrkFracCorrected':
            continue
        print feat
        print getattr(cat, 'features_pileup_corr_no_%s' % feat)

        ana.train(
            args.level, 
            ntrees=70,
            node_size=0.1,
            depth=10000,
            category=cat,
            verbose='v' if args.verbose else '',
            features='features_pileup_corr_no_%s' % feat,
            n_jobs=args.jobs)



