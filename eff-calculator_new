#!/usr/bin/env python
# ROOT/rootpy imports
from rootpy import ROOT
from rootpy.extern import argparse
from rootpy.io import root_open
from rootpy.tree import TreeChain
from rootpy.plotting import Efficiency, Hist
# local imports
from skim.mixins import TauCategories
from tauid.plotting import get_hist_array, get_efficiency_array
from tauid import VARIABLES
from tauid.tauid import get_IDtools
from tauid import log; log = log[__name__]
#-----------------------------------------------------------

#--> Receive and parse argument
parser = argparse.ArgumentParser()
parser.add_argument("input_file_list",
                    help="the list (txt file) of the input files")
parser.add_argument("output_file",
                    help="the name of the output root file")
parser.add_argument('--signal', action='store_true', default=False,
                    help="Sample type signal/bkg")
parser.add_argument("-N","--Nentries", type=int, default=-1,
                    help="Specify the number of events use to run")
args = parser.parse_args()
parser.print_usage()

# --> Import data files
file_list = []
inputfile = open(args.input_file_list)
for ifile in inputfile:
    file_list.append(ifile.strip())

tauCell = TreeChain('tauCell_test', file_list, events=args.Nentries)
tauCell.define_object(name='tau', prefix='off_', mix=TauCategories)
tauCell.define_object(name='L1_tau', prefix='L1_OfflineMatched_')

# ---> ID_Tools 
ID_Tools = get_IDtools(tauCell)

# --> Plotting category
plot_cat = ["all", "1p", "mp"]

variables = VARIABLES['plotting_id']

# --> Declaration of the list (python dictionary) of TEfficiency objects
Efficiencies = {}
hist_array = {}
for cat in plot_cat:
    hist_array[cat] = get_hist_array()
    Efficiencies[cat] = {}
    for tool in ID_Tools:
        Efficiencies[cat][tool] = get_efficiency_array()

#--------------------------------------------------------------
#-------------> loop OVER THE EVENTS OF THE INPUT TREE --------
#--------------------------------------------------------------

for event in tauCell:
    tau = event.tau
    L1_tau = event.L1_tau

    if args.signal and tau.index_matched_true<=-1:
        continue
    if L1_tau.index<=-1:
        continue
    if L1_tau.pt<8000.:
        continue
    if tau.pt<25000.:
        continue
    if tau.numTrack<1:
        continue

    #log.info(tau.pt)
    for cat in tau.category+["all"]:
        if not cat in plot_cat:
            continue
        for var, hist in hist_array[cat].items():
            if hasattr(tau, var):
                hist.Fill(getattr(tau, var))
            else:
                hist.Fill(getattr(event, var))
        for tool in ID_Tools:
            is_passed = ID_Tools[tool].Decision()
            log.info('{0}, {1}: Score={2}'.format(cat, tool, ID_Tools[tool].score))
            for var, hist in Efficiencies[cat][tool].items():
                if hasattr(tau, var):
                    Efficiencies[cat][tool][var].Fill(is_passed, getattr(tau, var))
                else:
                    Efficiencies[cat][tool][var].Fill(is_passed, getattr(event, var))

#--------------------------------------------------------------
#-------------> END OF THE LOOP OVER THE EVENTS        --------
#--------------------------------------------------------------



#--------------------------------------------------------------
#-------------> EFFICIENCY STORING       - --------------------
#--------------------------------------------------------------

with root_open(args.output_file, "recreate") as output:
    root_directory = output.CurrentDirectory()
    for cat in plot_cat:
        directory = output.mkdir(cat)
        directory.cd()
        for var, hist in hist_array[cat].items():
            hist.name = 'h_{0}_{1}'.format(cat, var)
            hist.Write()
        for tool in Efficiencies[cat].keys():
            for var, eff in Efficiencies[cat][tool].items():
                eff.SetName('eff_{0}_{1}_{2}'.format(cat, tool, var))
                eff.Write()
        root_directory.cd()

        
