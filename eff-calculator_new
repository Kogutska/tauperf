#!/usr/bin/env python

# ROOT/rootpy imports
from rootpy import ROOT
from rootpy.extern import argparse
from rootpy.io import root_open
from rootpy.tree import Tree, TreeChain, TreeModel, TreeBuffer
from rootpy.plotting import Efficiency, Hist
# local imports
from skim.mixins import TauCategories
from tauid import VARIABLES
from tauid.tauid import get_IDtools
from tauid import log; log = log[__name__]
#-----------------------------------------------------------

#--> Receive and parse argument
parser = argparse.ArgumentParser()
parser.add_argument("input_file_list",
                    help="the list (txt file) of the input files")
parser.add_argument("output_file",
                    help="the name of the output root file")
parser.add_argument('--signal', action='store_true', default=False,
                    help="Sample type signal/bkg")
parser.add_argument("-N","--Nentries", type=int, default=-1,
                    help="Specify the number of events use to run")
args = parser.parse_args()
parser.print_usage()

# --> Import data files
file_list = []
inputfile = open(args.input_file_list)
for ifile in inputfile:
    file_list.append(ifile.strip())

tauCell = TreeChain('tauCell_test', file_list, events=args.Nentries)
tauCell.define_object(name='tau', prefix='off_', mix=TauCategories)
tauCell.define_object(name='L1_tau', prefix='L1_OfflineMatched_')

# ---> ID_Tools 
ID_Tools = get_IDtools(tauCell)

# --> Plotting category
plot_cat = ["all","1p","mp"]

variables = VARIABLES['plotting_id']

# --> Declaration of the list (python dictionary) of TEfficiency objects
Efficiencies = {}
hist_array = {}
for tool in ID_Tools:
    Efficiencies[tool] = {}
for cat in plot_cat:
    for var in VARIABLES['plotting_id']:
        hist_array[var['name']+'_'+cat] = Hist(var['bins'], var['range'][0], var['range'][1], name="H_"+var['name']+"_"+cat)
    for tool in ID_Tools:
        for var in variables:
            Efficiencies[tool][var['name']+'_'+cat] = ROOT.TEfficiency("Efficiency_"+tool+"_"+var['name']+"_"+cat, "",
                                                                       var['bins'], var['range'][0], var['range'][1])

#--------------------------------------------------------------
#-------------> loop OVER THE EVENTS OF THE INPUT TREE --------
#--------------------------------------------------------------

for event in tauCell:
    tau = event.tau
    L1_tau = event.L1_tau

    if args.signal and tau.index_matched_true<=-1:
        continue

    if L1_tau.index<=-1:
        continue

    if L1_tau.pt<8000.:
        continue

    if tau.pt<25000.:
        continue
    
    for cat in tau.category+["all"]:
        if not cat in plot_cat:
            continue
        for var in VARIABLES['plotting_id']:
            hist_array[var['name']+'_'+cat].Fill(getattr(tau, var['name']))
        for tool in ID_Tools:
            for var in  variables:
                is_passed = ID_Tools[tool].Decision()
                if hasattr(tau, var['name']):
                    Efficiencies[tool][var['name']+'_'+cat].Fill(is_passed, getattr(tau, var['name']))
                else:
                    Efficiencies[tool][var['name']+'_'+cat].Fill(is_passed, getattr(event, var['name']))

#--------------------------------------------------------------
#-------------> END OF THE LOOP OVER THE EVENTS        --------
#--------------------------------------------------------------



#--------------------------------------------------------------
#-------------> EFFICIENCY STORING       - --------------------
#--------------------------------------------------------------

with root_open(args.output_file, "recreate") as output:
    root_directory = output.CurrentDirectory()
    for tool in Efficiencies:
        directory = output.mkdir(tool)
        directory.cd()
        for var in Efficiencies[tool]:
            Efficiencies[tool][var].Write()
        root_directory.cd()
    for _, hist in hist_array.items():
        hist.Write()
    output.Close()

        
