#!/usr/bin/env python

import ROOT
from rootpy.io import root_open
from tauperf import NTUPLE_PATH
from h5py import File
import os

from rootpy import log; log = log['/make-h5']


def get_records(tree, selection):
    log.info('converting tree {0} with selection {1} ...'.format(
            tree.name, selection))
    rec = tree2array(tree, selection=selection)
    return rec

def make_h5_name(root_file):
    abs_root_file = os.path.abspath(root_file)
    dir_name = os.path.dirname(abs_root_file)
    basename = os.path.basename(abs_root_file)
    h5_name = basename.replace('.root', '.h5')
    return os.path.join(dir_name, h5_name)

if __name__ == '__main__':

    import root_numpy
    from root_numpy import tree2array
    from argparse import ArgumentParser
    parser = ArgumentParser()
    parser.add_argument('file')
    parser.add_argument('--tree', default='tau')
    parser.add_argument('--overwrite', action='store_true', default=False)

    args = parser.parse_args()
    # parsing arguments
    root_file = args.file
    tree_name = args.tree

    with root_open(root_file) as rfile:
        log.info('Reading {0} with tree {1}'.format(root_file, args.tree))
        tree = rfile[tree_name]
        h5_name = make_h5_name(root_file)
        log.info('Going to create h5 file {0}'.format(h5_name))

        if os.path.exists(h5_name) and not args.overwrite:
            log.error('the file {0} already exists, use --overwrite to recreate it'.format(
                    h5_name))
            raise RuntimeError

        if os.path.exists(h5_name):
            log.info('remove {0}'.format(h5_name))
            os.remove(h5_name)

        sel_1p0n = 'true_nprongs == 1 && true_npi0s == 0 && abs(off_eta) < 1.1'
        sel_1p1n = 'true_nprongs == 1 && true_npi0s == 1 && abs(off_eta) < 1.1'
        sel_1p2n = 'true_nprongs == 1 && true_npi0s == 2 && abs(off_eta) < 1.1'
        sel_3p0n = 'true_nprongs == 3 && true_npi0s == 0 && abs(off_eta) < 1.1'
        sel_3p1n = 'true_nprongs == 3 && true_npi0s == 1 && abs(off_eta) < 1.1'

        rec_1p0n = get_records(tree, sel_1p0n)
        rec_1p1n = get_records(tree, sel_1p1n)
        rec_1p2n = get_records(tree, sel_1p2n)
        rec_3p0n = get_records(tree, sel_3p0n)
        rec_3p1n = get_records(tree, sel_3p1n)

        h5file = File(h5_name)
        h5file.create_dataset('rec_1p0n', data=rec_1p0n)
        h5file.create_dataset('rec_1p1n', data=rec_1p1n)
        h5file.create_dataset('rec_1p2n', data=rec_1p2n)
        h5file.create_dataset('rec_3p0n', data=rec_3p0n)
        h5file.create_dataset('rec_3p1n', data=rec_3p1n)
        h5file.flush()
        h5file.close()
        log.info('close {0}'.format(h5_name))
