#!/usr/bin/env python
import os
import logging
import rootpy
from rootpy.tree import Cut
from tauperf.analysis import Analysis
from tauperf.cmd import get_parser
from tauperf.variables import VARIABLES
from tauperf.categories import Category_1P
from tauperf.plotting.mpl import score_plot, eff_curve, eff_plot, var_plot

import numpy as np
import matplotlib.pyplot as plt
from numpy.lib import recfunctions

from root_numpy import rec2array
from sklearn import cross_validation
from sklearn.ensemble import AdaBoostClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import PassiveAggressiveClassifier as Q
from sklearn.externals import joblib

from sklearn.metrics import roc_curve, auc

log = logging.getLogger(os.path.basename(__file__))
if not os.environ.get("DEBUG", False):
    log.setLevel(logging.INFO)

rootpy.log.setLevel(logging.INFO)


if __name__ == "__main__":

    parser = get_parser()
    parser.add_argument('--jobs', default=-1, type=int)
    parser.add_argument('--train', default=False, action='store_true')
    args = parser.parse_args()

    ana = Analysis(
        use_drellyan=args.use_dy,
        trigger=args.trigger,
        no_weight=args.no_weight)


    cat = Category_1P

    evt_branches = [
        'averageintpercrossing',
        ]
    kin_branches = [
        'pt', 'eta', 'ntracks',
        ]

    old_tauid_branches = [
        'bdtjetscore',
        'is_loose',
        'is_medium',
        'is_tight',
        ]
    

    features = [args.level + '_' + f for f in cat.features_pileup_corrected]
    fields = evt_branches + [
        args.level + '_' + br for br in cat.features_pileup_corrected + 
        kin_branches + old_tauid_branches]
    

    cuts = cat.cuts_features_pileup_corrected
    cuts_sig = ana.tau.cuts(cat) & cuts 
    cuts_bkg = ana.jet.cuts(cat) & cuts 

    ana.tau.branches = fields
    ana.jet.branches = fields

    rec_sig = ana.tau.records(
        selection=cuts_sig.GetTitle())

    rec_bkg = ana.jet.records(
        selection=cuts_bkg.GetTitle())

            
    
    feat_sig = rec2array(rec_sig, fields=features + ['pu_weight'])
    feat_bkg = rec2array(rec_bkg, fields=features + ['pt_weight'])


    old_scores = np.concatenate((
            rec_sig[args.level + '_bdtjetscore'],
            rec_bkg[args.level + '_bdtjetscore']))

    weights = np.concatenate((
            rec_sig['pu_weight'],
            rec_bkg['pt_weight']))

    target = np.concatenate((
            np.ones(feat_sig.shape[0]),
            np.zeros(feat_bkg.shape[0])))

    data = np.concatenate((feat_sig, feat_bkg))

    
    log.info('splitting')
    data_train, data_test, y_train, y_test = cross_validation.train_test_split(
        data, target, test_size=0.2, random_state=42)


    X_train = data_train[:,:-1]
    weights_train = data_train[:,-1]

    X_test = data_test[:,:-1]
    weights_test = data_test[:,-1]

    #########################################################
    # classifying block
    if args.train:
        #         log.info('classifying')
        clf = AdaBoostClassifier(n_estimators=100)
        #         clf = Q()
        log.info('fitting')
        clf.fit(X_train, y_train, sample_weight=weights_train)
        joblib.dump(clf, 'cache/sk_out/clf.pkl')
    else:
        clf = joblib.load('cache/sk_out/clf.pkl')
    ##########################################################

    log.info('evaluating')
    new_scores = clf.decision_function(X_test)

    log.info('preparing test data')
    data_test = recfunctions.append_fields(
        data_test, ('new_score', 'is_sig', 'weight'), 
        [new_scores, y_test, weights_test], asrecarray=True)


    log.info('plotting')

    ###########################
    log.info('\t ROC curve...')
    fpr, tpr, thresholds = roc_curve(target, old_scores, sample_weight=weights)
    fpr_new, tpr_new, _ = roc_curve(y_test, new_scores, sample_weight=weights_test)
    plt.plot([0, 1], [0, 1], '--', color=(0.6, 0.6, 0.6), label='Luck')
    plt.plot(fpr, tpr, color='red', label='2015')
    plt.plot(fpr_new, tpr_new, color='blue', label='2016')
    plt.xlim([-0.05, 1.05])
    plt.ylim([-0.05, 1.05])
    plt.xlabel('False Positive Rate')
    plt.ylabel('True Positive Rate')
    plt.title('Tau ID ROC')
    plt.legend(loc="lower right")
    plt.savefig('plots/roc.pdf')

    ###########################
    log.info('\t BDT score...')
    pl = score_plot(
        data_test[data_test['is_sig'] == 1]['new_score'],
        data_test[data_test['is_sig'] == 0]['new_score'],
        data_test[data_test['is_sig'] == 1]['weight'],
        data_test[data_test['is_sig'] == 0]['weight'])
    pl.savefig('plots/scores.pdf')
    

    #################################
    log.info('\t input variables...')
    vars = {}
    for f in kin_branches + cat.features_pileup_corrected:
        vars[f] = VARIABLES[f]

    hists = ana.get_hist_samples_array(vars, args.level, category=cat)
    for k, h in hists.items():
        log.info(k)
        fig = var_plot(h['tau'], h['jet'], vars[k]['root'])
        fig.savefig('plots/{0}.pdf'.format(k))


#     ####################################
#     log.info('plotting efficiency plots')
#     eff = eff_curve(
#         rec_sig[rec_sig[args.level + '_is_medium'] == 1], rec_sig, 
#         'pt', 
#         #         'averageintpercrossing', 
#         weight_field='pu_weight', prefix=args.level)

#     log.info(eff)
#     plt1 = eff_plot(eff)
#     plt1.savefig('plots/eff.pdf')


