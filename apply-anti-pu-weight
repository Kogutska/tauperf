#!/usr/bin/env python
import os
import shutil

from rootpy.io import root_open
from rootpy.tree import TreeModel, FloatCol
from rootpy.plotting import Graph

import logging
from multiprocessing import Process
import ROOT


log = logging.getLogger('apply-anti-pileup-weight')



class Model(TreeModel):
    anti_pu_weight = FloatCol()

def add_pu_weight(tree):
    tree.create_buffer()
    tree.set_buffer(Model(), create_branches=True)
    branches = [
        tree.GetBranch('anti_pu_weight'),
        ]

    w_file = root_open('cache/anti_pileup_weights.root')
    gr = Graph(w_file['averageintpercrossing_weight'])
    w_file.Close()

    for event in tree:
        tree.anti_pu_weight = gr.Eval(tree.averageintpercrossing)
        for branch in branches:
            branch.Fill()
    tree.SetEntries(-1)

class Job(Process):
    def __init__(self, filename):
        super(Job, self).__init__()
        self.filename = filename

    def run(self):
        filename = self.filename
        path, name = os.path.split(filename)
        # copy to new file
        output = os.path.join(path, 'weighted.' + name)
        if os.path.exists(output):
            return 
        log.info("copying {0} to {1} ...".format(filename, output))
        shutil.copy(filename, output)
        with root_open(output, 'UPDATE') as file:
            tree_even = file.tau_even
            tree_odd = file.tau_odd
            if 'anti_pu_weight' in tree_even:
                log.info("weight already exist in {0} ...".format(output))
                return
            log.info("adding weight to {0} ...".format(output))
            add_pu_weight(tree_even)
            tree_even.Write('tau_even', ROOT.TObject.kOverwrite)
            add_pu_weight(tree_odd)
            tree_odd.Write('tau_odd', ROOT.TObject.kOverwrite)


if __name__ == '__main__':
    from rootpy.extern.argparse import ArgumentParser

    parser = ArgumentParser()
    parser.add_argument('files', nargs='+')
    args = parser.parse_args()

    from tauperf.parallel import run_pool
    jobs = [Job(f) for f in args.files]
    run_pool(jobs, n_jobs=-1)


