#!/usr/bin/env python
import os
import logging
import re
import rootpy
from rootpy.plotting.style import set_style
from rootpy.plotting import Hist, Graph, Legend
from rootpy.tree import Cut
from tauperf.analysis import Analysis
from tauperf.cmd import get_parser
from tauperf.variables import VARIABLES
from tauperf.categories import Category_1P_HLT
from tauperf.plotting import draw_ratio
from tauperf import UNMERGED_NTUPLE_PATH
from prettytable import PrettyTable
import ROOT

log = logging.getLogger(os.path.basename(__file__))
if not os.environ.get("DEBUG", False):
    log.setLevel(logging.INFO)
rootpy.log.setLevel(logging.INFO)
set_style('ATLAS', shape='rect')

from tauperf.plotting.compare import get_xtitle
from tauperf.plotting.templates import RatioPlot

def draw(s1, b1, s2, b2, field, category, normalize=True, logy=False):

    xtitle = get_xtitle(field)
    plot = RatioPlot(
        xtitle=xtitle,
        ytitle='{0}Events'.format(
            'Normalized ' if normalize else ''),
        ratio_title='Sig / Bkg',
        ratio_limits=(0, 3),
        ratio_line_values=[0.75, 1.5, 2.25],
        logy=logy)


    if normalize:
        s1_integral = s1.integral()
        if s1_integral != 0:
            s1 /= s1_integral

        b1_integral = b1.integral()
        if b1_integral != 0:
            b1 /= b1_integral

        s2_integral = s2.integral()
        if s2_integral != 0:
            s2 /= s2_integral

        b2_integral = b2.integral()
        if b2_integral != 0:
            b2 /= b2_integral

    s1.title = 'Real #tau, 10 < #mu < 18'
    s2.title = 'Real #tau, #mu > 18'
    b1.title = 'Fake #tau, 10 < #mu < 18'
    b2.title = 'Fake #tau, #mu > 18'

    s1.color = 'black'
    b1.color = 'black'
    s2.color = 'red'
    b2.color = 'red'

    s1.legendstyle = 'L'
    b1.legendstyle = 'L'
    s2.legendstyle = 'L'
    b2.legendstyle = 'L'

    s1.markersize = 0
    b1.markersize = 0
    s2.markersize = 0
    b2.markersize = 0

    s1.linewidth = 2
    b1.linewidth = 2
    s2.linewidth = 2
    b2.linewidth = 2

    s1.fillstyle = 'hollow'
    b1.fillstyle = 'hollow'
    s2.fillstyle = 'hollow'
    b2.fillstyle = 'hollow'

    s1.linestyle = 'solid'
    b1.linestyle = 'dashed'
    s2.linestyle = 'solid'
    b2.linestyle = 'dashed'

    s1.drawstyle='hist E0'
    b1.drawstyle='hist E0'
    s2.drawstyle='hist E0'
    b2.drawstyle='hist E0'

    plot.draw('main', [s1, b1, s2, b2], ypadding=(0.3, 0.))

    ratio_1 = Hist.divide(s1, b1, fill_value=-1)
    ratio_1.drawstyle = 'hist'
    ratio_1.color = 'black'
    ratio_band_1 = Graph(ratio_1, fillstyle='/', fillcolor='black', linewidth=0)
    ratio_band_1.drawstyle = '20'

    ratio_2 = Hist.divide(s2, b2, fill_value=-1)
    ratio_2.drawstyle = 'hist'
    ratio_2.color = 'red'
    ratio_band_2 = Graph(ratio_2, fillstyle='/', fillcolor='black', linewidth=0)
    ratio_band_2.drawstyle = '20'

    plot.draw('ratio', [ratio_band_1, ratio_1, ratio_band_2, ratio_2])
    with plot.pad('main') as pad:
        # # legend
        # #         leg = Legend([a, b], 0.2, 0.2, 0.45,
        # #                      margin=0.35, textsize=textsize)
        leg = Legend([s1, b1, s2, b2], pad=pad, textsize=20)
        leg.Draw()
        # draw the category label
        if category is not None:
            label = ROOT.TLatex(
                pad.GetLeftMargin() + 0.04, 0.87,
                category.label)
            label.SetNDC()
            label.SetTextFont(43)
            label.SetTextSize(22)
            label.Draw()

            

    return plot


if __name__ == "__main__":

    parser = get_parser('plot')
    args = parser.parse_args()

    cuts = None
    if args.cut:
        cuts = Cut(args.cut)

    cat = Category_1P_HLT
    ana = Analysis(
        use_drellyan=args.use_dy,
        use_jz_slices=args.use_jz,
        trigger=args.trigger,
        no_weight=args.no_weight)

    nbins, xmin, xmax = 110, -0.05, 1.05
    field_hists = {
        'hlt_SumPtTrkFrac': Hist(nbins, xmin, xmax),
        'hlt_SumPtTrkFracCorrected': Hist(nbins, xmin, xmax),
        }        
    

    field_hists['hlt_SumPtTrkFrac'].title = 'uncorrected'
    field_hists['hlt_SumPtTrkFracCorrected'].title = 'corrected'

    cut_mu10_18 = Cut('10 < averageintpercrossing < 18')
    field_hists_sig_mu10_18 = ana.tau.get_hist_array(field_hists, category=cat, cuts=cut_mu10_18)
    field_hists_bkg_mu10_18 = ana.jet.get_hist_array(field_hists, category=cat, cuts=cut_mu10_18)

    cut_mu18 = Cut('averageintpercrossing > 18')
    field_hists_sig_mu18 = ana.tau.get_hist_array(field_hists, category=cat, cuts=cut_mu18)
    field_hists_bkg_mu18 = ana.jet.get_hist_array(field_hists, category=cat, cuts=cut_mu18)


    plot = draw(
        field_hists_sig_mu10_18['hlt_SumPtTrkFrac'],
        field_hists_bkg_mu10_18['hlt_SumPtTrkFrac'], 
        field_hists_sig_mu18['hlt_SumPtTrkFrac'],
        field_hists_bkg_mu18['hlt_SumPtTrkFrac'], 
        'SumPtTrkFrac', cat,
        logy=True)
    log.info(plot)
    plot.SaveAs('sumptfrac_debug.png')

    plot2 = draw(
        field_hists_sig_mu10_18['hlt_SumPtTrkFracCorrected'],
        field_hists_bkg_mu10_18['hlt_SumPtTrkFracCorrected'], 
        field_hists_sig_mu18['hlt_SumPtTrkFracCorrected'],
        field_hists_bkg_mu18['hlt_SumPtTrkFracCorrected'], 
        'SumPtTrkFracCorrected', cat,
        logy=True)
    plot2.SaveAs('sumptfrac_corrected_debug.png')
