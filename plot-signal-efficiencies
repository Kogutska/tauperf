#!/usr/bin/env python
import os
# root/rootpy imports
import ROOT
from rootpy.plotting import Efficiency
from rootpy.plotting.style import get_style
from rootpy import asrootpy
from rootpy.extern.argparse import ArgumentParser

from tauperf import UNMERGED_NTUPLE_PATH
from tauperf.samples import Tau
from tauperf.variables import VARIABLES, get_label
from tauperf.categories import CATEGORIES
from tauperf.plotting import draw_efficiencies
from tauperf.extern.cuttable import BDT_Cut

parser = ArgumentParser()
parser.add_argument('action', choices=['multi_wp', 'breakdown'], default='multi_wp', type=str)
args = parser.parse_args()

style = get_style('ATLAS', shape='rect')
style.SetPadRightMargin(0.10)
style.cd()

# INSTANTIATE THE TAU SAMPLE
tau = Tau(ntuple_path=os.path.join(UNMERGED_NTUPLE_PATH, 'merge_weighted_nominal'))


vars = {
    'pt': VARIABLES['pt'], 
    'eta': VARIABLES['eta'], 
    'npv': VARIABLES['good_npv'], 
    'averageintpercrossing': VARIABLES['averageintpercrossing'],
    }

vars_truth = {'nprongs': VARIABLES['nprongs']}

if args.action == 'multi_wp':
    TARGETS = [0.5, 0.7, 0.8]
    for category in CATEGORIES['plotting_hlt']:

        hist_samples = tau.get_field_hist(vars, 'hlt')
        hist_samples.update(tau.get_field_hist(vars_truth, 'true'))
        hist_samples = tau.get_hist_array(hist_samples, category, multi_proc=True)

        hists_array = []
        for target in TARGETS:
            cut = 'hlt_bdt_score_pileup_corrected>=BDT_Cut(hlt_pt, hlt_ntracks, {0})'.format(target)
            hist_samples_cut = tau.get_field_hist(vars, 'hlt')
            hist_samples_cut.update(tau.get_field_hist(vars_truth, 'true'))
            hist_samples_cut = tau.get_hist_array(hist_samples_cut, category, cut, multi_proc=True)
            hists_array.append(hist_samples_cut)
            
        for var in hist_samples:
            effs = []
            for t, hists in zip(TARGETS, hists_array):
                eff = Efficiency(
                    hists[var], hist_samples[var])
                eff.title = 'target = {0}'.format(t)
                effs.append(eff)
            canvas = draw_efficiencies(effs, var, category) 
            canvas.SaveAs('plots/efficiencies_signal_{0}_{1}.png'.format(var, category.name))

if args.action == 'breakdown':
    from tauperf.categories import Category_NoCut, Category_1P_HLT, Category_MP_HLT
    from tauperf.categories.offline import (L1_TAUCLUS, 
                                            L1_ISOL,
                                            OFFLINE_L1_MATCHED, 
                                            OFFLINE_HLT_MATCHED)
    from tauperf.categories.hlt import HLT_PRESEL, HLT_PRESEL_CALO, HLT_PRESEL_PT_CUT

    vars = {'averageintpercrossing': VARIABLES['averageintpercrossing']}
    hist_templates = tau.get_field_hist(vars, 'hlt')

    # Denominateur (offline_truth matched taus)
    hists_den = tau.get_hist_array(hist_templates, Category_NoCut)

    # Apply L1
    hists_L1 = tau.get_hist_array(
        hist_templates, Category_NoCut, cuts=OFFLINE_L1_MATCHED & L1_TAUCLUS & OFFLINE_HLT_MATCHED)# & L1_ISOL)

    # Apply L1 + PRESEL PT
    hists_L1_PRESEL_PT = tau.get_hist_array(
        hist_templates, Category_NoCut, 
        cuts=OFFLINE_L1_MATCHED & L1_TAUCLUS & OFFLINE_HLT_MATCHED & HLT_PRESEL_PT_CUT) # & L1_ISOL)

    # Apply L1 + FASTTRACKING + CALO PRESEL
    hists_L1_PRESEL_CALO = tau.get_hist_array(
        hist_templates, Category_NoCut, 
        cuts=OFFLINE_L1_MATCHED & L1_TAUCLUS & HLT_PRESEL_CALO & OFFLINE_HLT_MATCHED)# & L1_ISOL)

    # Apply L1 + PRESEL PT + FASTTRACKING
    hists_L1_PRESEL = tau.get_hist_array(
        hist_templates, Category_NoCut, 
        cuts=OFFLINE_L1_MATCHED & L1_TAUCLUS & HLT_PRESEL & OFFLINE_HLT_MATCHED)#& L1_ISOL


    bdt_cut = 'hlt_bdt_score_pileup_corrected>=BDT_Cut(hlt_pt, hlt_ntracks, {0})'

    # 1P category
    hists_1p = tau.get_hist_array(hist_templates, Category_1P_HLT, cuts=bdt_cut.format(0.7))
        
    # MP category
    hists_mp = tau.get_hist_array(hist_templates, Category_MP_HLT, cuts=bdt_cut.format(0.5))

    hists_hlt = {}
    for var in hist_templates:
        hists_hlt[var] = hists_1p[var] + hists_mp[var]
    
    for var in hist_templates:

        eff_L1 = Efficiency(hists_L1[var], hists_den[var])
        eff_L1.title = 'L1 (TAU12)'

        eff_L1_PRESEL_PT = Efficiency(hists_L1_PRESEL_PT[var], hists_den[var])
        eff_L1_PRESEL_PT.title = 'L1 + pT (presel)'

        eff_L1_PRESEL_CALO = Efficiency(hists_L1_PRESEL_CALO[var], hists_den[var])
        eff_L1_PRESEL_CALO.title = 'L1 + pT + calo (presel)'

        eff_L1_PRESEL = Efficiency(hists_L1_PRESEL[var], hists_den[var])
        eff_L1_PRESEL.title = 'L1 + HLT presel.'

        eff_hlt = Efficiency(hists_hlt[var], hists_den[var])
        eff_hlt.title = 'L1 + HLT'

        effs = [eff_L1, eff_L1_PRESEL_PT, eff_L1_PRESEL_CALO, eff_L1_PRESEL, eff_hlt]

        canvas = draw_efficiencies(effs, var, Category_NoCut) 
        canvas.SaveAs('plots/efficiencies_signal_breakdown_{0}.png'.format(var))

