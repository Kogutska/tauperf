#!/usr/bin/env python
import os
import logging
import re
import rootpy
from rootpy.plotting.style import set_style
from rootpy.tree import Cut
from tauperf.analysis import Analysis
from tauperf.variables import VARIABLES
from tauperf.plotting import draw_ratio

log = logging.getLogger(os.path.basename(__file__))
if not os.environ.get("DEBUG", False):
    log.setLevel(logging.INFO)
rootpy.log.setLevel(logging.INFO)
set_style('ATLAS', shape='rect')


if __name__ == "__main__":
    from argparse import ArgumentParser
    parser = ArgumentParser()
    parser.add_argument('--use-dy', default=False, action='store_true', help='Use DY simulation for signal')
    parser.add_argument('--categories', default='plotting')
    parser.add_argument('--var', default=None, help='Specify a particular variable')
    parser.add_argument('--logy', default=False, action='store_true')
    parser.add_argument('--cut', default=None, type=str, help='additional cut to apply')
    args = parser.parse_args()

    cuts = None
    if args.cut:
        cuts = Cut(args.cut)

    vars = VARIABLES
    if args.var is not None:
        if args.var in VARIABLES:
            vars = {args.var: VARIABLES[args.var]}
        else:
            raise RuntimeError('Wrong key (see variables.py)')

    ana = Analysis(use_drellyan=args.use_dy)
    for cat in ana.iter_categories(args.categories):
        hist_samples_array = ana.get_hist_samples_array(vars, 'hlt', cat, cuts=cuts)
        for field, hists_dict in hist_samples_array.items():
            log.info(field)
            plot = draw_ratio(
                hists_dict['tau'], hists_dict['jet'], 
                field, cat, logy=args.logy)
            log.info(plot)
            if args.logy:
                plot.SaveAs(os.path.join('plots', 'hlt_'+field+'_'+cat.name+'_logy.png'))
            else: 
                plot.SaveAs(os.path.join('plots', 'hlt_'+field+'_'+cat.name+'.png'))
    for cat in ana.iter_categories(args.categories):
        hist_samples_array = ana.get_hist_signal_array(vars, 'off', 'hlt', cat, cuts=cuts)
        for field, hists_dict in hist_samples_array.items():
            plot = draw_ratio(
                hists_dict['off'], hists_dict['hlt'], field, cat, 
                normalize=False, logy=args.logy)
            log.info(plot)
            if args.logy:
                plot.SaveAs(os.path.join('plots', 'hlt_vs_off_'+field+'_'+cat.name+'_logy.png'))
            else:
                plot.SaveAs(os.path.join('plots', 'hlt_vs_off_'+field+'_'+cat.name+'.png'))
                               
