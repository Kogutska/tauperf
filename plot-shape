#!/usr/bin/env python
import os
import logging
import re
import rootpy
from rootpy.plotting.style import set_style
from rootpy.tree import Cut
from tauperf.analysis import Analysis
from tauperf.cmd import get_parser
from tauperf.variables import VARIABLES
from tauperf.plotting import draw_ratio
from tauperf import UNMERGED_NTUPLE_PATH
from prettytable import PrettyTable
log = logging.getLogger(os.path.basename(__file__))
if not os.environ.get("DEBUG", False):
    log.setLevel(logging.INFO)
rootpy.log.setLevel(logging.INFO)
set_style('ATLAS', shape='rect')


if __name__ == "__main__":

    parser = get_parser('plot')
    args = parser.parse_args()

    cuts = None
    if args.cut:
        cuts = Cut(args.cut)

    vars = VARIABLES
    if args.var is not None:
        vars = {}
        for var in args.var:
            if var in VARIABLES:
                vars[var] = VARIABLES[var]
            else:
                raise RuntimeError('Wrong key (see variables.py)')

    ana = Analysis(
        use_drellyan=args.use_dy,
        trigger=args.trigger,
        no_weight=args.no_weight)

    table = PrettyTable([
            'Category', 'Tau', 'Jet'])

    for cat in ana.iter_categories(args.categories):
        hist_samples_array = ana.get_hist_samples_array(vars, args.level, category=cat, cuts=cuts)
        y_tau = ana.tau.events(cat, weighted=True)[1].value
        y_jet = ana.jet.events(cat)[1].value
        table.add_row([cat.name, y_tau, y_jet])
        for field, hists_dict in hist_samples_array.items():
            log.info(field)
            plot = draw_ratio(
                hists_dict['tau'], hists_dict['jet'], 
                field, cat, logy=args.logy)
            log.info(plot)
            if args.logy:
                plot.SaveAs(os.path.join('plots', args.level + '_' + field+'_'+cat.name+'_logy.png'))
            else: 
                plot.SaveAs(os.path.join('plots', args.level + '_' + field + '_' + cat.name+'.png'))

    print
    log.info(50 * '=')
    print table
    log.info(50 * '=')

    # for cat in ana.iter_categories(args.categories):
    #     hist_samples_array = ana.get_hist_signal_array(vars, 'off', 'hlt', cat, cuts=cuts)
    #     for field, hists_dict in hist_samples_array.items():
    #         plot = draw_ratio(
    #             hists_dict['off'], hists_dict['hlt'], field, cat, 
    #             normalize=False, logy=args.logy)
    #         log.info(plot)
    #         if args.logy:
    #             plot.SaveAs(os.path.join('plots', 'hlt_vs_off_'+field+'_'+cat.name+'_logy.png'))
    #         else:
    #             plot.SaveAs(os.path.join('plots', 'hlt_vs_off_'+field+'_'+cat.name+'.png'))
                               
