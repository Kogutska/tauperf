#!/usr/bin/env python
import os
import logging
import re
import rootpy
from rootpy.plotting.style import set_style
from rootpy.plotting import Canvas, Legend, HistStack
from rootpy.tree import Cut

from tauperf.analysis import Analysis
from tauperf.samples import JZ
from tauperf.variables import VARIABLES, get_label
from tauperf.categories import Category_Preselection
from tauperf.plotting import draw_shape

log = logging.getLogger(os.path.basename(__file__))
if not os.environ.get("DEBUG", False):
    log.setLevel(logging.INFO)
rootpy.log.setLevel(logging.INFO)
set_style('ATLAS', shape='rect')


if __name__ == "__main__":
    from argparse import ArgumentParser
    parser = ArgumentParser()
    parser.add_argument('--logy', default=False, action='store_true')
    parser.add_argument('--cut', default=None, type=str, help='additional cut to apply')
    args = parser.parse_args()


    category = Category_Preselection

    cuts = None
    if args.cut:
        cuts = Cut(args.cut)

    

    vars = {'pt': VARIABLES['pt']}
    jet = JZ(weight_field='mc_event_weight', label='JZ sum')
    field_hist = jet.get_field_hist(vars, prefix='hlt')
    
    selection = jet.cuts(category)
    if not cuts is None:
        selection &= cuts
    if jet.weight_field is not None:
        selection *= jet.weight_field
        
        
    log.info(selection)
    log.info(field_hist)

    field_hists_comp = {}
    field_hists_tot = {}
    for key, hist in field_hist.items():
        field_hists_comp[key] = jet.draw_helper(hist, key, selection, individual_components=True)
        field_hists_tot[key] = jet.draw_helper(hist, key, selection)
    

    for key in field_hists_comp.keys():
        hist_comps = field_hists_comp[key]

        for h, s, scale, col in zip(hist_comps, jet.components, jet.scales, ['black', 'blue', 'green', 'red', 'purple', 'orange', 'yellow']):
            # rescale the components
            h *= scale
            # fancy the hists
            h.title = s.label
            h.color = col
            h.fillstyle = 'hollow'
            h.drawstyle = 'HIST'
            h.linewidth = 2
            h.legendstyle = 'F'
            h.xaxis.title = 'p_{T} [GeV]'
            h.yaxis.title = 'Weighted Events'
        hist_tot = field_hists_tot[key]

        stack = HistStack(hist_comps)

        c = Canvas()
        hist_tot.xaxis.title = hist_comps[0].xaxis.title
        hist_tot.yaxis.title = hist_comps[0].yaxis.title
        hist_tot.Draw('PE')
        stack.Draw("samenostack")
        if args.logy:
            c.SetLogy()
        leg = Legend(hist_comps+[hist_tot], textsize=15)
        leg.Draw('same')
        c.SaveAs('./plots/blurp.png')
    log.info(field_hists_comp)
    log.info(field_hists_tot)




