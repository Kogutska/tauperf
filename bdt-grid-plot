#!/usr/bin/env python
import os
import logging
import rootpy
import re
import itertools
from rootpy.extern.argparse import ArgumentParser
from rootpy.io import root_open
from rootpy.plotting import Graph2D, Graph, Canvas
from rootpy.plotting.style import get_style

import tauperf
PATTERN = re.compile('summary_(?P<cat>\w+)_ntrees(?P<ntrees>\d+)_depth(?P<depth>\d+)_nodesize(?P<node>\d+).root')
log = logging.getLogger(os.path.basename(__file__))
rootpy.log.setLevel(logging.INFO)

ROOT_DIR = 'weights'



def roc_integral(file_name):
    dir_name = file_name.replace('summary', 'BDT').strip('.root')
    hist_name = 'MVA_' + dir_name + '_rejBvsS'
    with root_open(os.path.join(ROOT_DIR, file_name)) as f:
        try:
            h = f['Method_BDT'][dir_name][hist_name]
            return h.integral()
        except:
            log.warning('Cannot retrieve the histogram')
            return -9999.

samples = {}
samples['1p'] = []
samples['mp'] = []

for _, _, filenames in os.walk(ROOT_DIR):
    for root_file in filenames:
        match = re.match(PATTERN, root_file)
        if match:
            roc = roc_integral(root_file)
            if roc > 0:
                samples[match.group('cat')].append(
                    {'ntrees': int(match.group('ntrees')),
                     'depth': int(match.group('depth')),
                     'node': int(match.group('node')),
                     'roc': roc})


# filtered_list = samples['1p']
filtered_list = [s for s in itertools.ifilter(lambda v: v['node'] == 5 and v['ntrees'] == 450, samples['mp'])]
#[s for s in itertools.ifilter(lambda v: v['node']==5 and v['ntrees']==400, samples['mp'])]



# for sample in filtered_list:
#     print sample

# Scan = Graph2D(len(filtered_list))
Scans = {}
for field in ('ntrees', 'depth', 'node'):
    Scans[field] = Graph(len(filtered_list))

for ip, s in enumerate(filtered_list):
    for key, gr in Scans.items():
        gr.SetPoint(ip, s[key], s['roc'])

style = get_style('ATLAS', shape='rect')
style.SetPadRightMargin(0.10)
with style:
    for key, gr in Scans.items():
        c = Canvas()
        gr.xaxis.title = key
        gr.yaxis.title = 'ROC Integral'
        gr.Draw('AP')
        # c.RedrawAxis()
        c.SaveAs('toto_{0}.png'.format(key))
