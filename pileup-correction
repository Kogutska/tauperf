#!/usr/bin/env python
# python imports
import os
import re
import shutil
import logging
# root/rootpy imports
from rootpy.plotting import Canvas, Graph, Legend, F1
from rootpy.plotting.style import set_style
from rootpy.io import root_open
from rootpy.extern.argparse import ArgumentParser
from ROOT import TLatex
# local imports
from tauperf.categories import Category_1P_HLT, Category_MP_HLT

log = logging.getLogger(os.path.basename(__file__))

parser = ArgumentParser()
parser.add_argument('--cat', default='1p', type=str, choices = ['1p', 'mp'])
args = parser.parse_args()
if args.cat == '1p':
    cat = Category_1P_HLT
else:
    cat = Category_MP_HLT


set_style('ATLAS', shape='rect')
filename = os.path.join('cache', 'pileup_' + cat.name + '.root')
path, name = os.path.split(filename)
output = os.path.join(path, 'fitted.' + name)
shutil.copy(filename, output)

with root_open(output, 'update') as f:
    for _, _, graphs in f.walk(class_pattern='*TGraphAsymmErrors*'):
        for graph in graphs:
            gr = f[graph]
            line = F1('[0] + [1] * x', 0, 40)
            poly = F1('[0] + [1] * x + [2] * x * x', 0, 40)
            line.SetParameters(gr.GetMean(2), 0.)
            poly.SetParameters(gr.GetMean(2), 0., 0.)

            fit_res_line = gr.Fit(line, 'QRSNO')
            fit_res_poly = gr.Fit(poly, 'QRSNO')
            chi2_line = fit_res_line.Chi2() / fit_res_line.Ndf()
            chi2_poly = fit_res_poly.Chi2() / fit_res_poly.Ndf()
            c = Canvas()
            gr.Draw('AP')
            line.color = 'red'
            poly.color = 'blue'
            line.linewidth = 2
            poly.linewidth = 2
            line.legendstyle = 'L'
            poly.legendstyle = 'L'
            line.title = 'Linear fit: #chi^{{2}}/ndf = {0:1.3f}'.format(chi2_line)
            poly.title = 'Polynomial fit: #chi^{{2}}/ndf = {0:1.3f}'.format(chi2_poly)
            line.Draw('same')
            poly.Draw('same')
            lat = TLatex(c.GetLeftMargin() + 0.01, 1 - c.GetTopMargin() - 0.05, cat.label)
            lat.SetNDC()
            lat.SetTextSize(22)
            lat.Draw('same')
            # leg = Legend([line, poly], leftmargin=0.3, rightmargin=0.1, topmargin=0.01, textsize=22)
            leg = Legend([line, poly])
            leg.Draw('same')
            c.SaveAs(os.path.join('plots', 'fit_' + graph + '_' + cat.name + '.png'))
            log.info(graph)
            log.info('chi2/ndf --> line: {0}, poly: {1} \n'.format(chi2_line, chi2_poly))
            
            if chi2_poly < chi2_line:
                poly.name = graph + '_fit'
                poly.Write()
            else:
                line.name = graph + '_fit'
                line.Write()

