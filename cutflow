#!/usr/bin/env python

from helpers import ordereddict
import sys

import ROOT

from rootpy.extern import argparse
from rootpy import stl
stl.vector( 'vector<int>' )
stl.vector( 'vector<float>' )

import rootpy
rootpy.log.basic_config_colorized()

from skim_tools.TruthTauLoader import TruthTauLoader
from skim_tools.RecoTauLoader  import RecoTauLoader
from skim_tools.TrigTauLoader  import EFTauLoader,L2TauLoader,L1TauLoader
from skim_tools.SlimTree       import SlimTree
from helpers import AnalysisTools

ROOT.gROOT.ProcessLine(".x $ROOTCOREBIN/scripts/load_packages.C")
print 'rootcore libraries loaded'

#--> Receive and parse argument
parser = argparse.ArgumentParser()
parser.add_argument("input_rootfile", help="the input rootfile name")
parser.add_argument("output_rootfile", help="the output rootfile name")
parser.add_argument("sample_type", help="sample type (signal_14TeV,signal_8TeV,background_14TeV,data")
parser.add_argument("-N","--Nentries", type=int,default=-1,help="Specify the number of events use to run")
args = parser.parse_args()
parser.print_usage()


#--> Open input file
print 'open file '+args.input_rootfile
in_file = ROOT.TFile.Open(args.input_rootfile)
print 'get d3pd tree'
d3pd_tree = in_file.Get('tau')

#--> Load the GRL
print 'Load the GRL file'
reader = ROOT.Root.TGoodRunsListReader()
reader.SetXMLFile('grl/data12_8TeV.periodAllYear_DetStatus-v61-pro14-02_DQDefects-00-01-00_PHYS_StandardGRL_All_Good.xml')
reader.Interpret()
grl = reader.GetMergedGoodRunsList()



# --> Indicate variables to compute and to fill in output tree
Include = ['basic','EDMVariables', 'TauID']

if '14TeV' in args.sample_type: Include += ['trigger_14TeV']
if 'signal' in args.sample_type: Include += ['truth']
    
print Include

#--> Get number of entries in input tree
nEvents = d3pd_tree.GetEntries()
if args.Nentries !=-1:
    nEvents = args.Nentries
print 'Number of events: ' + str(nEvents)


CutFlow = ordereddict.OrderedDict()
CutFlow["events"] = 0
CutFlow["good_events"] = 0
CutFlow["taus"] = 0
CutFlow["author"] = 0
CutFlow["truth_matched"] = 0
CutFlow["offline_L1_matched"] = 0
CutFlow["offline_L1_ptcut"] = 0
CutFlow["EF_matched"] = 0
CutFlow["L2_matched"] = 0
CutFlow["L1_matched"] = 0
CutFlow["EF_tauNoCut"] = 0
CutFlow["L2_tau20_medium"] = 0
CutFlow["EF_tau20_medium1"] = 0

#--------------------------------------------------------------
#-------------> LOOP OVER THE EVENTS OF THE INPUT TREE --------
#--------------------------------------------------------------
for entry in range(0, nEvents):
    d3pd_tree.GetEntry( entry )
    AnalysisTools.Processing(entry,nEvents,int(nEvents/100))

    CutFlow["events"] += 1


    if 'data' in args.sample_type and grl.HasRunLumiBlock(d3pd_tree.RunNumber,d3pd_tree.lbn )==0: continue
    CutFlow["good_events"] +=1
    #--> Get number of reconstructed taus
    nTaus = d3pd_tree.tau_n
    # ------------------------------------
    #--> LOOP THROUGH THE RECONSTRUCTED TAUS
    # ------------------------------------
    for j in range(0, nTaus):
        CutFlow["taus"] +=1
        # --> Call RecoTauLoader
        reco_tau = RecoTauLoader(d3pd_tree,j,Include)
        if reco_tau.author != 3: continue
        CutFlow["author"] +=1

        # ---> Truth level tau information (for signal sample only)
        if 'signal' in args.sample_type and not reco_tau.hasTruth: continue
        CutFlow["truth_matched"] += 1
                
        L1tau_fromreco = L1TauLoader(d3pd_tree,reco_tau.L1Index,['basic'])
        if 'offline' in args.sample_type and not L1tau_fromreco.hasL1matched: continue
        CutFlow['offline_L1_matched'] += 1
        L1tau_fromreco_4vec = L1tau_fromreco.L1_4Vector

        if 'offline' in args.sample_type and not L1tau_fromreco_4vec.Pt()>8000.: continue
        CutFlow['offline_L1_ptcut']  += 1

        # ----------------------------------------------------
        # ------ EVENT FILTER LEVEL VARIABLES
        # ----------------------------------------------------
        EFtau = EFTauLoader(d3pd_tree,reco_tau.EFIndex,Include)

        if not EFtau.hasEFmatched: continue
        CutFlow["EF_matched"] +=1
            
        # ----------------------------------------------------
        # ------ LEVEL TWO VARIABLES
        # ----------------------------------------------------
        L2tau = L2TauLoader(d3pd_tree,EFtau.getL2TauIndex(),Include)
        if not L2tau.hasL2matched: continue
        CutFlow["L2_matched"] +=1
        
        # ----------------------------------------------------
        # ------ LEVEL ONE VARIABLES
        # ----------------------------------------------------
        L1tau = L1TauLoader(d3pd_tree,L2tau.getL1TauIndex(),Include)
        if not L1tau.hasL1matched: continue
        CutFlow["L1_matched"] +=1


        # ----------------------------------------------------
        # ------ Trigger Chains
        # ----------------------------------------------------
        if '8TeV' in args.sample_type and not EFtau.tauNoCut: continue
        CutFlow['EF_tauNoCut'] +=1
        if not L2tau.tau20_medium: continue
        CutFlow["L2_tau20_medium"] += 1
        if not EFtau.tau20_medium1: continue
        CutFlow["EF_tau20_medium1"] +=1
    # ------------------------------------
    #--> LOOP THROUGH THE RECONSTRUCTED TAUS
    # ------------------------------------


for cut in CutFlow:
    print cut,": \t",CutFlow[cut]
