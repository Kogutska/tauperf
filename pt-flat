#!/usr/bin/env python
import os

# root/rootpy imports
from rootpy.plotting import Hist
from rootpy.extern.tabulartext import PrettyTable
from rootpy import asrootpy

from tauperf import UNMERGED_NTUPLE_PATH
from tauperf.samples import Tau

# INSTANTIATE THE TAU SAMPLE
tau = Tau(ntuple_path=os.path.join(UNMERGED_NTUPLE_PATH, 'merge_weighted_nominal'))

PT_BINS = [
    '25000 < hlt_pt < 30000.',
    '30000 < hlt_pt < 40000.',
    '40000 < hlt_pt < 50000.',
    '50000 < hlt_pt < 60000.',
    '60000 < hlt_pt < 70000.',
    '70000 < hlt_pt < 80000.',
    '80000 < hlt_pt < 90000.',
    '90000 < hlt_pt',
]
TARGETS = [0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]

def scan_score(h, target=0.6):
    """
    Scan a score histogram and find
    where the efficiency (partial integral) / (total integral)
    is the closest to the target.
    Returns the bin center and the efficiency
    """
    if h.integral() == 0:
        return None

    effs = []
    for i, bin in enumerate(h):
        effs.append((
                bin.x.center, 
                h.integral(0, i) / h.integral()))

    # sort (bin center, efficiency) tuple by closest to the target
    sorted_effs = sorted(effs, key=lambda eff: abs(eff[1] - target))
    return sorted_effs[0]


def get_score_hist(key, cat, pt_bin):
    """
    Return the score histogram for 
    a given pT bin
    """
    sig = tau.get_hist_array(
        {key: Hist(200, 0, 1)},
        category=cat, cuts=pt_bin)
    return sig[key]
        

if __name__ == '__main__':
    from rootpy.extern.argparse import ArgumentParser

    from tauperf.categories import Category_1P_HLT, Category_MP_HLT
    from tauperf.parallel import run_pool, FuncWorker

    parser = ArgumentParser()
    parser.add_argument('--key', type=str, default='hlt_bdt_score_pileup_corrected')
    parser.add_argument('--category', type=str, default='1p', choices=['1p', 'mp'])
    args = parser.parse_args()

    if args.category == '1p':
        cat = Category_1P_HLT
    else:
        cat = Category_MP_HLT

    # Declare and instantiate the list of workers 
    workers = [FuncWorker(get_score_hist, args.key, cat, pt_bin) for pt_bin in PT_BINS]
    # Run - multiprocessing rocks !
    run_pool(workers, n_jobs=-1)
    score_hists = [w.output for w in workers]
    # Determine the cut for each configuration
    flat_efficiencies = {}
    for pt_bin, h in zip(PT_BINS, score_hists):
        flat_efficiencies[pt_bin] = {}
        h = asrootpy(h)
        # loop over all the targets
        for target in TARGETS:
            bdt_cut, eff = scan_score(h, target)
            flat_efficiencies[pt_bin][target] ={'bdt_cut': bdt_cut, 'eff': eff}

    # print output table
    table = PrettyTable()
    table.add_column('pt bin', [pt_bin for pt_bin in PT_BINS])
    for target in TARGETS:
        table.add_column(
            'target: {0}'.format(target),
            ['{0:1.3f} (eff = {1:1.3f})'.format(
                    flat_efficiencies[pt_bin][target]['bdt_cut'],
                    flat_efficiencies[pt_bin][target]['eff']) for pt_bin in PT_BINS])
    print
    print 15 * '=', '>', cat.name
    print table
    print 

    # print output to be pasted in c++ code
    print 'Good old C++, this is for you ...'
    print
    print 'std::map<int, std::map<double, double> > table_{0};'.format(args.category)
    for i, _ in enumerate(PT_BINS):
        for j, target in enumerate(TARGETS):
            print 'table_{0}[{1}][{2}] = {3};'.format(args.category,
                i, j, flat_efficiencies[pt_bin][target]['bdt_cut'])
