#!/usr/bin/env python
import os
import logging
import re
import rootpy
from rootpy.plotting.style import set_style
from rootpy.tree import Cut
from rootpy.plotting import Canvas, Hist, Legend
from tauperf.analysis import Analysis
from tauperf.cmd import get_parser
from tauperf.variables import VARIABLES
from tauperf.plotting import draw_ratio
from tauperf import UNMERGED_NTUPLE_PATH
log = logging.getLogger(os.path.basename(__file__))
if not os.environ.get("DEBUG", False):
    log.setLevel(logging.INFO)
rootpy.log.setLevel(logging.INFO)
set_style('ATLAS', shape='rect')


MU_BINS = [
    (0, 10),
    (10, 16),
    (16, 20)
]



def plot_plot(hist_list, field, sample, cat, level):
    c = Canvas()
    h0 = hist_list[0][field][sample]
    h1 = hist_list[1][field][sample]
    h2 = hist_list[2][field][sample]
    
    h0.color = 'red'
    h1.color = 'black'
    h2.color = 'blue'

    h0.linewidth = 2
    h1.linewidth = 2
    h2.linewidth = 2
    
    h0 /= h0.Integral()
    h1 /= h1.Integral()
    h2 /= h2.Integral()
    
    h0.title = '{0} < mu < {1}'.format(MU_BINS[0][0], MU_BINS[0][1])
    h1.title = '{0} < mu < {1}'.format(MU_BINS[1][0], MU_BINS[1][1])
    h2.title = '{0} < mu < {1}'.format(MU_BINS[2][0], MU_BINS[2][1])
    
    leg = Legend([h0, h1, h2], pad=c, textsize=22)
    
    from tauperf.plotting.compare import get_xtitle
    h0.xaxis.title = get_xtitle(field)
    h1.xaxis.title = get_xtitle(field)
    h2.xaxis.title = get_xtitle(field)
    
    h0.Draw('HIST')
    h1.Draw('SAMEHIST')
    h2.Draw('SAMEHIST')
    leg.Draw()
    c.SaveAs('./plots/features/pileup_{3}_{2}_{0}_cat_{1}.png'.format(
            field, cat.name, sample, level))
    c.SetLogy()
    c.SaveAs('./plots/features/pileup_{3}_{2}_{0}_cat_{1}_logy.png'.format(
            field, cat.name, sample, level))
    
    
if __name__ == "__main__":
    parser = get_parser('plot')				
    parser.add_argument('--dummy-range', action='store_true', default=False)
    args = parser.parse_args()

    cuts = None
    if args.cut:
        cuts = Cut(args.cut)

    ana = Analysis(
        use_drellyan=args.use_dy,
        trigger=args.trigger)

    for cat in ana.iter_categories(args.categories):
        vars = {}
        # vars['centFrac'] = VARIABLES['centFrac']
        for v in cat.features:
            vars[v] = VARIABLES[v]

        vars_pu = {}
        # vars_pu['centFracCorrected'] = VARIABLES['centFracCorrected']
        for v in cat.features_pileup_corrected:
            vars_pu[v] = VARIABLES[v]

        hists = []
        hists_pu = []
        for bin in MU_BINS:
            cut_pu = Cut('{0} < averageintpercrossing < {1}'.format(bin[0], bin[1]))
            hist_samples_array = ana.get_hist_samples_array(
                vars, args.level, category=cat, cuts=cuts&cut_pu, dummy_range=args.dummy_range)
            hist_samples_array_pu = ana.get_hist_samples_array(
                vars_pu, args.level, category=cat, cuts=cuts&cut_pu, dummy_range=args.dummy_range)
            hists.append(hist_samples_array)
            hists_pu.append(hist_samples_array_pu)
        print hist_samples_array
        
        for field in hists[0].keys():
            print field
            plot_plot(hists, field, 'tau', cat, args.level)
            plot_plot(hists, field, 'jet', cat, args.level)

        for field in hists_pu[0].keys():
            plot_plot(hists_pu, field, 'tau', cat, args.level)
            plot_plot(hists_pu, field, 'jet', cat, args.level)
