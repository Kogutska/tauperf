#!/usr/bin/env python
import os
import logging
import rootpy
from rootpy.plotting.style import set_style
from rootpy.plotting import Hist, Efficiency
from tauperf.plotting import draw_efficiencies
from tauperf.plotting.roc import  old_working_points
from tauperf.analysis import Analysis
from tauperf.classify import working_point
from tauperf.variables import VARIABLES
from tauperf.cmd import get_parser
from prettytable import PrettyTable

log = logging.getLogger(os.path.basename(__file__))
if not os.environ.get("DEBUG", False):
    log.setLevel(logging.INFO)

rootpy.log.setLevel(logging.INFO)

set_style('ATLAS', shape='rect')
if __name__ == "__main__":

    parser = get_parser('plot')
    parser.add_argument('--jobs', default=-1, type=int)
    group_driver = parser.add_mutually_exclusive_group()
    group_driver.add_argument(
        '--target-eff', dest='target', 
        action='store_const', const='eff')
    group_driver.add_argument(
        '--target-rej', dest='target', 
        action='store_const', const='rej')
    group_driver.set_defaults(target='eff')
    parser.add_argument('--target-value', default=0.5, type=float)
    parser.add_argument('--score-var', default='hlt_bdt_score_hlt_training_dev', type=str)
    args = parser.parse_args()
    

    if args.trigger:
        wp_level = 'hlt'
    else:
        wp_level = 'off'

    ana = Analysis(
        use_drellyan=args.use_dy,
        trigger=args.trigger,
        no_weight=args.no_weight)

    # score_var = 'hlt_bdt_score_{1}_training_dev'.format(wp_level)
    
    score_var = args.score_var

    table = PrettyTable([
            "Category",
            "working point",
            "old eff(B) / eff(S)",
            "new eff(B) / eff(S)",
            "cut value"])



    vars = {
        'pt': VARIABLES['pt'],
        'eta': VARIABLES['eta'],
        'good_npv': VARIABLES['good_npv'],
        'averageintpercrossing': VARIABLES['averageintpercrossing'],
        }


    for cat in ana.iter_categories(args.categories):
        _, wps = old_working_points(ana, cat, wp_level)
        new_wps = []
        for wp in wps:
            print wp.name, wp.eff_b
            
            target = wp.eff_b
            h_template = Hist(10000, 0, 1)
            hist_b = ana.jet.get_hist_array(
                {score_var: h_template},
                category=cat)
            hist_b = hist_b[score_var]

            hist_s = ana.tau.get_hist_array(
                {score_var: h_template},
                category=cat)
            hist_s = hist_s[score_var]
        
            bin = -1
        
            for ibin in xrange(hist_b.GetNbinsX()):
                eff = (hist_b.Integral() - hist_b.Integral(0, ibin)) / hist_b.Integral()
                if eff < target:
                    bin = ibin
                    cut_val = hist_b.GetBinLowEdge(bin)
                    break

            if bin == -1:
                continue
            eff_b_new = (hist_b.Integral() - hist_b.Integral(0, bin)) / hist_b.Integral()
            eff_s_new = (hist_s.Integral() - hist_s.Integral(0, bin)) / hist_s.Integral()
            
            new_wp = working_point(
                cut_val, eff_s_new, eff_b_new,
                name='new_' + wp.name)
            new_wps.append(new_wp)
            table.add_row([
                    cat.name, 
                    wp.name, 
                    '{0:1.3f} / {1:1.3f}'.format(wp.eff_b, wp.eff_s), 
                    '{0:1.3f} / {1:1.3f}'.format(eff_b_new, eff_s_new), 
                    hist_b.GetBinLowEdge(bin)])

        print table
        hist_denom = ana.get_hist_samples_array(
            vars, wp_level, category=cat)
        hist_wp = ana.get_hist_samples_array(
            vars, wp_level, category=cat, cuts=wps[1].cut)
        hist_new = ana.get_hist_samples_array(
            vars, wp_level, category=cat, cuts='{0} > {1}'.format(
                score_var, new_wps[1].cut))

        # sig_effs = {}
        # bkg_effs = {}
        # for v in vars.keys():
        #     sig_effs[v] = []
        #     bkg_effs[v] = []

        for v in vars.keys():
            sig_effs = [
                Efficiency(
                    hist_wp[v]['tau'],
                    hist_denom[v]['tau'],
                    title='MC15'),
                Efficiency(
                    hist_new[v]['tau'],
                    hist_denom[v]['tau'],
                    title='new tauID')]

            c_sig = draw_efficiencies(sig_effs, wp_level + '_' + v, cat)
            c_sig.SaveAs('./plots/new_wp_sig_comparison_{0}_{1}.png'.format(
                    v, cat.name))

            bkg_effs = [
                Efficiency(
                    hist_wp[v]['jet'],
                    hist_denom[v]['jet'],
                    title='MC15'),
                Efficiency(
                    hist_new[v]['jet'],
                    hist_denom[v]['jet'],
                    title='new tauID')]
            
            c_bkg = draw_efficiencies(bkg_effs, wp_level + '_' + v, cat)
            c_bkg.SaveAs('./plots/new_wp_bkg_comparison_{0}_{1}.png'.format(
                    v, cat.name))


    print table
