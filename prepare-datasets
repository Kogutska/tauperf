#!/usr/bin/env python
import os
import subprocess
import glob
import logging

from tauperf import NTUPLE_PATH
from tauperf.datasets import create_database, read_database

log = logging.getLogger(os.path.basename(__file__))

        
if __name__ == '__main__':
    from rootpy.extern.argparse import ArgumentParser
    parser = ArgumentParser()
    parser.add_argument('action', type=str, choices=['db', 'clean', 'merge', 'dev'])
    parser.add_argument('--key', type=str, choices=['corrected', 'weighted'], default='weighted')
    parser.add_argument('--dry', action='store_true', default=False)
    args = parser.parse_args()
    print args

    # Create the database
    if args.action == 'db':
        create_database()

    # Cleaning block
    if args.action == 'clean':
        SAMPLES = read_database()
        print SAMPLES
        for key, sample in SAMPLES.items():
            log.info('clean up %s ...' % key)
            if sample.has_key('dirs'):
                for d in sample['dirs']:
                    for rfile in os.listdir(os.path.join(NTUPLE_PATH, d)):
                        if args.key in rfile:
                            cmd = 'rm {0}'.format(
                                os.path.join(NTUPLE_PATH, d, rfile))
                            log.info(cmd)
                            if not args.dry:
                                subprocess.call(cmd, shell=True)
            else:
                log.info('No directories for sample %s' % key)

    # merging block
    if args.action == 'merge':
        SAMPLES = read_database()
        for key, sample in SAMPLES.items():
            log.info('Merging %s ...' % key)
            if sample.has_key('dirs'):
                all_files = []
                for d in sample['dirs']:
                    files = glob.glob(
                        os.path.join(NTUPLE_PATH, d, args.key + '*'))
                    all_files.extend(files)
                target_file = os.path.join(
                    NTUPLE_PATH, '{0}.{1}.root'.format(args.key, key))
                if len(all_files) < 1000:
                    input_list = ' '.join(all_files)
                    cmd = 'hadd {0} {1}'.format(target_file, input_list)
                    log.info(cmd)
                    if not args.dry:
                        subprocess.call(cmd, shell=True)
                else:
                    input_list_1 = ' '.join(all_files[:len(all_files) / 2])
                    input_list_2 = ' '.join(all_files[len(all_files) / 2:])
                    cmd1 = 'hadd {0} {1}'.format(target_file, input_list_1)
                    cmd2 = 'hadd -f {0} {1}'.format(target_file, input_list_2)
                    log.info(cmd1)
                    log.info(cmd2)
                    if not args.dry:
                        subprocess.call(cmd1, shell=True)
                        subprocess.call(cmd2, shell=True)
                    
    # bac a sable
    if args.action == 'dev':
        SAMPLES = read_database()
        for key, sample in SAMPLES.items():
            log.info('Submitting ...')
            if sample.has_key('dirs'):
                for d in sample['dirs']:
                    files = glob.glob(
                        os.path.join(NTUPLE_PATH, d, sample['prefix'] + '*.root*'))
                    print files
                       
