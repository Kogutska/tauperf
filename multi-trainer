#!/usr/bin/env python
import os
import pickle
# --> python imports
from  itertools import combinations
import fileinput

# --> rootpy imports
import rootpy
rootpy.log.basic_config_colorized()
from rootpy import asrootpy
from rootpy.io import root_open
from rootpy.extern import argparse
from rootpy.plotting.style import get_style
from rootpy.plotting import Hist, Hist2D, Graph, Canvas
# --> root imports
import ROOT
# --> local imports
from tools.datasets import DATASETS, VERSION
from tauid.trainer import BDTScan
from tauid.trainer import trainer
from tauid.jobs import run_pool
from tauid import VARIABLES
from tauid import log; log=log[__name__]
from batch import qsub, get_setup

# -----------------------------
def combos_list(lst, length):
    for combo in combinations((e for e in lst), length):
        yield list(combo)


ROOT.gROOT.SetBatch(True)

#--> Receive and parse argument
parser = argparse.ArgumentParser()
parser.add_argument("actions", choices=['train', 'trim', 'presel_test', 'full_test'])
parser.add_argument('--sig-dataset', help='the signal dataset')
parser.add_argument('--bkg-dataset', help='the background dataset')
parser.add_argument("--factory-prefix", help="the basename of the training result", default='test')
parser.add_argument("--ID", help="the ID menu trained (full/presel)",
                    default='presel', choices=['presel', 'full'] )
parser.add_argument("--cat", help="the category used for training", default='all',
                    choices=['all', '1p', '3p', 'mp', '1p_0n', '1p_Xn', '3p_0n', '3p_Xn'] )
parser.add_argument("--object-type", help="the sample type", default="offline", choices=['EF', 'offline'])
parser.add_argument('--submit', action='store_true', default=False)
args = parser.parse_args()
parser.print_usage()


signal = DATASETS[args.sig_dataset]
background = DATASETS[args.bkg_dataset]
ecm = signal['ecm']

# --> Variables set
if 'presel' in args.ID:
    variables = VARIABLES['presel_3']
else:
    if '1p' in args.cat:
        variables = VARIABLES['full_1p']
    else:
        variables = VARIABLES['full_mp']


# --> Import signal and bkg trees
sig_tree = ROOT.TChain('tauCell_train')
bkg_tree = ROOT.TChain('tauCell_train')

for ifile in open(signal['path']):
    sig_tree.Add(ifile.strip())
for ifile in open(background['path']):
    bkg_tree.Add(ifile.strip())

#---> Signal and Bkg selection
tau_cat_cut   = {}
if 'EF' in args.object_type:
    matching = ROOT.TCut("EF_ismatched==1 && L2_ismatched==1 && L1_ismatched==1")
    trigger_cut = {}
    trigger_cut["14TeV"] = ROOT.TCut("L2_L2_tau20_medium==1")
    trigger_cut["8TeV"]  = ROOT.TCut("EF_tauNoCut==1")
    eta_cut  = ROOT.TCut("EF_eta<2.2 && EF_eta>-2.2")
    tau_cat_cut["all"]     = ROOT.TCut("EF_numTrack>0")
    tau_cat_cut["1p"]      = ROOT.TCut("EF_numTrack==1")
    tau_cat_cut["3p"]      = ROOT.TCut("EF_numTrack==3")
    tau_cat_cut["mp"]      = ROOT.TCut("EF_numTrack>1")
    tau_cat_cut["1p_0n"]   = ROOT.TCut("EF_numTrack==1 && pi0BDTPrimary>0.47")
    tau_cat_cut["3p_0n"]   = ROOT.TCut("EF_numTrack==3 && pi0BDTPrimary>0.47")
    tau_cat_cut["1p_Xn"]   = ROOT.TCut("EF_numTrack==1 && pi0BDTPrimary<0.47")
    tau_cat_cut["3p_Xn"]   = ROOT.TCut("EF_numTrack==3 && pi0BDTPrimary<0.47")



if 'offline' in args.object_type:
    matching = ROOT.TCut("L1_OfflineMatched_index>-1 && L1_OfflineMatched_pt>8000.")
    eta_cut  = ROOT.TCut("off_eta<2.2 && off_eta>-2.2")
    pt_cut   = ROOT.TCut("off_pt>20000.")
    tau_cat_cut["all"]     = ROOT.TCut("off_numTrack>0")
    tau_cat_cut["1p"]      = ROOT.TCut("off_numTrack==1")
    tau_cat_cut["3p"]      = ROOT.TCut("off_numTrack==3")
    tau_cat_cut["mp"]      = ROOT.TCut("off_numTrack>1")
    tau_cat_cut["1p_0n"]   = ROOT.TCut("off_numTrack==1 && off_pi0BDTPrimary>0.47")
    tau_cat_cut["3p_0n"]   = ROOT.TCut("off_numTrack==3 && off_pi0BDTPrimary>0.47")
    tau_cat_cut["1p_Xn"]   = ROOT.TCut("off_numTrack==1 && off_pi0BDTPrimary<0.47")
    tau_cat_cut["3p_Xn"]   = ROOT.TCut("off_numTrack==3 && off_pi0BDTPrimary<0.47")

truth = ROOT.TCut("off_index_matched_true>-1")
bkgcut  =  matching+eta_cut+pt_cut
bkgcut  += tau_cat_cut[args.cat]
if 'EF' in args.object_type:
    bkgcut  += trigger_cut[ecm]
sigcut  = bkgcut+truth
log.info('-------- bkg cut --------')
log.info(bkgcut)
log.info('-------- sig cut --------')
log.info(sigcut)


outputs = []
nevts_list = [5000] #[10, 50, 100, 500, 1000, 5000, 10000, 50000]
ntrees_list = [700]#[50*i for i in range(1,21)]
for nevts in nevts_list:
    for ntrees in ntrees_list:
        output_name  = 'tmp/{0}_{1}_{2}_{3}_{4}_nevts{5}_ntrees{6}.root'.format(args.factory_prefix, args.cat,
                                                                                ecm, args.object_type,
                                                                                args.ID, nevts, ntrees)
        factory_name = '{0}_{1}_{2}_{3}_{4}'.format(args.factory_prefix, args.cat,
                                                    ecm, args.object_type, args.ID)
        outputs.append((output_name, factory_name, nevts, ntrees))

if 'train' in args.actions:
    workers = []
    for output in outputs:
        (output_name, factory_name, nevts, ntrees) = output
        workers.append(BDTScan(output_name,factory_name, VARIABLES['presel_3'],
                               sig_tree, bkg_tree, sigcut, bkgcut, ntrees, nevts))
    run_pool(workers, n_jobs=-1)


if 'presel_test' in args.actions:
    Scan = Hist2D(nevts_list, ntrees_list, type='F')
    Scan.name = 'Scan'
    Scan.xaxis.title = 'Mininal Number of Events per Node'
    Scan.yaxis.title = 'Number of Trees'
    for output in outputs:
        (output_name, factory_name, nevts, ntrees) = output
        with root_open(output_name) as output_file:
            log.info(output_name)
            key_names = [key.GetName() for key in output_file.Method_BDT.BDT.keys()]
            if 'MVA_BDT_effBvsS' in key_names:
                h = asrootpy(output_file.Method_BDT.BDT.MVA_BDT_effBvsS)
                target = min(enumerate(list(h.x())), key=lambda x: abs(x[1]-0.95))
                target = (target[0], list(h.y())[target[0]])
            else:
                target = (0.95, 0.999)
            
            log.info('{0},{1}: {2}'.format(ntrees, nevts, target))
            Scan.Fill(nevts,ntrees,(1-target[1]))
    with get_style('ATLAS', shape='rect') as style:
        style.SetTextFont(42)
        c = Canvas()
        c.SetLogx()
        Scan.Draw('colzTEXT')
        c.SaveAs('toto.png')



if 'trim' in args.actions:
    ntrees_best = 700
    nevts_best = 5000
    listes = []
    for length in range(3,len(VARIABLES['presel_3'])):
        sublists = [sublist for sublist in combos_list(VARIABLES['presel_3'], length)]
        log.info("nvar = {0}: nlists = {1}".format(length,len(sublists)))
        listes += sublists

    chunk_size = 10
    chunks = [listes[x:x+chunk_size] for x in xrange(0, len(listes), chunk_size)]

    chunk_dict = {}
    for index, chunk in enumerate(chunks):
        list_dict = {}
        for sublist in chunk:
            vars_string = '_'.join([var['name'] for var in sublist])
            list_dict[vars_string] = sublist

        chunk_dict['chunk_{0}'.format(index)] = list_dict
        
    with open('variables_list.pickle', 'w') as file:
        pickle.dump(chunk_dict, file)
    
    for index, chunk in enumerate(chunks):
        setup = get_setup('batch/setup.sfu.txt')
        chunk_name = 'chunk_{0}'.format(index)
        cmd_args = ['./trainer', chunk_name, '--pickle-file variables_list.pickle',
                    '--sig-file %s'%args.sig_file, '--bkg-file %s'%args.bkg_file,
                    '--factory-prefix %s'%args.factory_prefix,
                    '--ID %s'%args.ID, '--cat %s'%args.cat, '--ecm %s'%ecm,
                    '--object-type %s'%args.object_type,
                    '--sig-cut "%s"'%sigcut, '--bkg-cut "%s"'%bkgcut,
                    '--ntrees %d'%ntrees_best, '--nevts %d'%nevts_best, '--n-jobs %d'%1]
        cmd = ' '.join(cmd_args)
        name = 'trimming_chunk_{0}'.format(index)
        cmd = "cd %s && %s && %s" % (os.getcwd(), setup, cmd)
        log.info(name)
        if args.submit:
            qsub(cmd, name=name, ncpus=1)
 
    graph_points = []
    for liste in listes:
        output_name = './tmp/'
        output_name += '_' .join([args.factory_prefix, args.cat, ecm, args.object_type, args.ID, 'nevts%d'%nevts_best, 'ntrees%d'%ntrees_best]+[var['name'] for var in liste])  
        output_name += '.root'

        if not os.path.exists(output_name):
            continue
        
        with root_open(output_name) as output_file:
            log.info(output_name)
            if not 'Method_BDT' in output_file:
                continue
            key_names = [key.GetName() for key in output_file.Method_BDT.BDT.keys()]
            if 'MVA_BDT_effBvsS' in key_names:
                h = asrootpy(output_file.Method_BDT.BDT.MVA_BDT_effBvsS)
                target = min(enumerate(list(h.x())), key=lambda x: abs(x[1]-0.95))
                target = (target[0], list(h.y())[target[0]])
            else:
                target = (0.95, 0.999)
            graph_point = (len(liste), target[1])
            graph_points.append(graph_point)

    Scan = Graph(len(graph_points))
    for ip, point in enumerate(graph_points):
        log.info(point)
        Scan.SetPoint(ip, point[0], 1-point[1])
    Scan.name = 'Scan'
    Scan.xaxis.title = 'Number of variables'
    Scan.yaxis.title = 'Background rejection (1-#epsilon_{B})'
    with get_style('ATLAS', shape='rect') as style:
        style.SetTextFont(42)
        c = Canvas()
        Scan.Draw('APE')
        c.SaveAs('toto.png')


 
