#!/usr/bin/env python
import os
import shutil

from rootpy.io import root_open
from rootpy.tree import TreeModel, FloatCol
from rootpy.plotting import F1

import logging
from multiprocessing import Process
import ROOT

from tauperf.categories import Category_1P_HLT, Category_MP_HLT
from tauperf.variables import VARIABLES
from tauperf.samples.db import get_pileup_file

log = logging.getLogger(os.path.basename(__file__))
if not os.environ.get("DEBUG", False):
    log.setLevel(logging.INFO)


features_corrected = []
for var in Category_1P_HLT.features:
    feature = {'orig':VARIABLES[var]['name'], 
               'corr':'hlt_' + VARIABLES[var]['name'] + '_pileup_corrected'}
    features_corrected.append(feature)

for var in Category_MP_HLT.features:
    if var not in Category_1P_HLT.features:
        feature = {'orig':VARIABLES[var]['name'], 
                   'corr':'hlt_' + VARIABLES[var]['name'] + '_pileup_corrected'}
        features_corrected.append(feature)

    
class Model(TreeModel):
    # 1p / mp
    hlt_InnerTrkAvgDist_pileup_corrected = FloatCol()
    hlt_etOverPtLeadTrk_pileup_corrected = FloatCol()
    hlt_ChPiEMEOverCaloEME_pileup_corrected = FloatCol()
    hlt_EMPOverTrkSysP_pileup_corrected = FloatCol()
    hlt_centFrac_pileup_corrected = FloatCol()
    hlt_approx_ptRatio_pileup_corrected = FloatCol()
    # 1p only
    hlt_ipSigLeadTrk_BS_pileup_corrected = FloatCol()
    hlt_SumPtTrkFrac_pileup_corrected = FloatCol()
    # mp only
    hlt_dRmax_pileup_corrected = FloatCol()
    hlt_trFlightPathSig_pileup_corrected = FloatCol()
    hlt_massTrkSys_pileup_corrected = FloatCol()
    hlt_approx_vistau_m_pileup_corrected = FloatCol()


    
def get_correction_function(feat, ntracks):
    if ntracks == 0:
        return None
    if ntracks == 1:
        file = get_pileup_file('fitted.pileup_1prong_hlt')
    else:
        file = get_pileup_file('fitted.pileup_multiprongs_hlt')
    try:
        return file['tau_' + feat['orig'] + '_fit']
    except:
        return None

def correct_one_variable(var, mu, func):
    if isinstance(func, F1):
        # correct by the difference w.r.t to the mu=20
        corr = func.Eval(mu) - func.Eval(20)
        return var - corr
    else:
        return var

        
def add_corrected_variables(tree):
    tree.create_buffer()
    tree.set_buffer(Model(), create_branches=True)
    branches = []
    for feat in features_corrected:
        branch = tree.GetBranch(feat['corr'])
        branches.append(branch)

    tree.define_object('hlt', prefix='hlt_')
    for event in tree:
        hlt_tau = event.hlt
        
        # calculate corrected features
        for feat in features_corrected:
            func = get_correction_function(feat, hlt_tau.ntracks)
            corr_val = correct_one_variable(
                getattr(hlt_tau, feat['orig']), 
                event.averageintpercrossing, func)
            log.debug('{0}: {1} --> {2}'.format(
                    feat['orig'], getattr(hlt_tau, feat['orig']), corr_val))
            setattr(tree, feat['corr'], corr_val)

        # fill the branches
        for branch in branches:
            branch.Fill()
    tree.SetEntries(-1)

class Job(Process):
    def __init__(self, filename):
        super(Job, self).__init__()
        self.filename = filename

    def run(self):
        filename = self.filename
        path, name = os.path.split(filename)
        # copy to new file
        output = os.path.join(path, 'corrected.' + name)
        if os.path.exists(output):
            return 
        log.info("copying {0} to {1} ...".format(filename, output))
        shutil.copy(filename, output)
        with root_open(output, 'UPDATE') as file:
            tree = file.tau
            for feat in features_corrected:
                if feat['corr'] in tree:
                    log.info("{0} already exist in {1} ...".format(feat['corr'], output))
                    return
            log.info("adding pileup corrected variables to {0} ...".format(output))
            add_corrected_variables(tree)            
            tree.Write(tree.name, ROOT.TObject.kOverwrite)


if __name__ == '__main__':
    from rootpy.extern.argparse import ArgumentParser

    parser = ArgumentParser()
    parser.add_argument('files', nargs='+')
    args = parser.parse_args()

    from tauperf.jobs import run_pool
    jobs = [Job(f) for f in args.files]
    run_pool(jobs, n_jobs=-1)


